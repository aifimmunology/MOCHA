[{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"load-libraries-archr-project-and-annotation-databases","dir":"Articles","previous_headings":"","what":"0. Load libraries, ArchR project, and annotation databases","title":"Walkthrough with COVID Dataset","text":"Optionally filter ArchR project subset samples.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"library(MOCHA) library(ArchR) library(TxDb.Hsapiens.UCSC.hg38.refGene)  library(org.Hs.eg.db) library(BSgenome.Hsapiens.UCSC.hg19) # You should substitute this with your own ArchR project. # You must have completed cell labeling with your ArchR project.  ArchRProj <- ArchR::loadArchRProject(\"/home/jupyter/FullCovid\")  metadata <- data.table::as.data.table(ArchR::getCellColData(ArchRProj)) studySignal <- median(metadata$nFrags)  # Get metadata information at the sample level lookup_table <- unique(   metadata[, c(     \"Sample\",     \"COVID_status\",     \"Visit\",     \"days_since_symptoms\"   ),   with = FALSE   ] )  # Subset to visit 1 and extract samples samplesToKeep <- lookup_table$Sample[   lookup_table$Visit == \"FH3 COVID-19 Visit 1\" &     lookup_table$days_since_symptoms <= 15 |     is.na(lookup_table$days_since_symptoms) ]  # subset ArchR Project idxSample <- BiocGenerics::which(ArchRProj$Sample %in% samplesToKeep) cellsSample <- ArchRProj$cellNames[idxSample] ArchRProj <- ArchRProj[cellsSample, ]"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"setting-parameters","dir":"Articles","previous_headings":"","what":"1. Setting Parameters","title":"Walkthrough with COVID Dataset","text":"set according ArchR project investigative question. details parameters, view help pages function using ?callOpenTiles ?getSampleTileMatrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"# Parameters for calling open tiles. cellPopLabel <- \"CellSubsets\"  cellPopulations <- c(\"CD16 Mono\")  numCores <- 20"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"call-open-tiles","dir":"Articles","previous_headings":"","what":"2. Call open tiles","title":"Walkthrough with COVID Dataset","text":"Get sample-tile matrices specified cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"tileResults <- MOCHA::callOpenTiles(   ArchRProj,   cellPopLabel = cellPopLabel,   cellPopulations = cellPopulations,   TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",   Org = \"org.Hs.eg.db\",   numCores = numCores,   studySignal = studySignal,   outDir = tempdir() )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-consensus-sample-tile-matrices","dir":"Articles","previous_headings":"","what":"3. Get consensus sample-tile matrices","title":"Walkthrough with COVID Dataset","text":"…cell populations. matrices organized cell population RangedSummarizedExperiment object primary input downstream analyses. advantage MOCHA’s ability call sample-specific open tiles can determine high-quality set ”consensus tiles determined follows: sample “votes” whether tile open sample, keep tiles called open minimum percentage samples. minimum percentage samples tile must called retained controlled threshold. groupColumn can provided specify metadata column separates data sample groups, e.g. case control groups. Consensus tiles computed group, union consensus tiles group retained. used expected biological differences sample groups. Currently best utilized group similar size, threshold applied evenly group. default, groupColumn null samples pooled vote consensus tiles.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"# Computing the TSAM can take into account groupings of  # samples when determining consensus tiles. # Our samples can be grouped by the metadata column 'COVID_status' # into 'Positive' and 'Negative' groups. # Since these groupings may have unique biology and we expect differences # in accessibility, we want to compute consensus tiles on each  # group independently and take the union of consensus tiles from each group. groupColumn <- \"COVID_status\"   # We set the threshold to require a tile must be open in at least  # (0.2 * the number of samples in each group) samples to be  # retained threshold <- 0.2  # Alternatively, you can set the threshold to 0 to keep the union of # all samples' open tiles. # This is equivalent to setting a threshold that would retain # tiles that are open in at least one sample.   SampleTileMatrices <- MOCHA::getSampleTileMatrix(   tileResults,   cellPopulations = \"CD16 Mono\",   groupColumn = groupColumn,   threshold = threshold,   verbose = FALSE )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"optional-add-gene-annotations","dir":"Articles","previous_headings":"","what":"4. (Optional) Add gene annotations","title":"Walkthrough with COVID Dataset","text":"…motifs SampleTileMatrices. info aid downstream analyses required differential accessibility co-accessibility.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"# This function can also take any GRanges object # and add annotations to its metadata. SampleTileMatricesAnnotated <- MOCHA::annotateTiles(SampleTileMatrices)  # Load a curated motif set from library(chromVARmotifs) # included with ArchR installation data(human_pwms_v2) SampleTileMatricesAnnotated <- MOCHA::addMotifSet(   SampleTileMatricesAnnotated,    pwms = human_pwms_v2,    w = 7 # weight parameter for motifmatchr )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"optional-plot-a-specific-regions-coverage","dir":"Articles","previous_headings":"","what":"5. (Optional) Plot a specific region’s coverage","title":"Walkthrough with COVID Dataset","text":"plot coverage specific region gene infection stage.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"regionToPlot = \"chr4:XXX-XXXX\"  countSE <- MOCHA::extractRegion(   SampleTileObj = SampleTileMatrices,    cellPopulations = \"CD16 Mono\",    region = regionToPlot,    groupColumn = \"COVID_status\",    numCores = numCores,    sampleSpecific = FALSE ) dev.off() pdf(\"ExamplePlot.pdf\") # Note that to show specific genes with the option' whichGene' # you must have the package RMariaDB installed  MOCHA::plotRegion(countSE = countSE, whichGene = \"MYD88\") dev.off()"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-differential-accessibility-for-specific-cell-populations","dir":"Articles","previous_headings":"","what":"6. Get differential accessibility for specific cell populations","title":"Walkthrough with COVID Dataset","text":"comparing MAIT cells samples groupColumn “COVID_status” Positive (foreground) Negative samples (background).","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"cellPopulation <- \"CD16 Mono\" groupColumn <- \"COVID_status\" foreground <- \"Positive\" background <- \"Negative\"  # Choose to output a GRanges or data.frame. # Default is TRUE outputGRanges <- TRUE  # Optional: Standard output will display the number of tiles found  # below a false-discovery rate threshold. # This parameter does not filter results and only affects the  # afforementioned message.  fdrToDisplay <- 0.2  differentials <- MOCHA::getDifferentialAccessibleTiles(   SampleTileObj = SampleTileMatrices,   cellPopulation = cellPopulation,   groupColumn = groupColumn,   foreground = foreground,   background = background,   fdrToDisplay = fdrToDisplay,   outputGRanges = outputGRanges,   numCores = numCores )  # The output contains a GRanges with all tiles and their differential  # test results. We can filter by FDR to get our set of  # differentially accessible tiles:  res = head(plyranges::filter(differentials, seqnames =='chr4' & FDR < 0.2))"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-co-accessible-links","dir":"Articles","previous_headings":"","what":"7. Get co-accessible links","title":"Walkthrough with COVID Dataset","text":"…input regions (tiles) neighboring regions within window. give first ten differential tiles input regions.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"Walkthrough with COVID Dataset","title":"Walkthrough with COVID Dataset","text":"","code":"regions = res$Tile  # Alternatively, define regions as a character vector # of region strings in the format \"chr:start-end\" # regions <- c( # \"chr4:7326500-7326999\", # \"chr4:7327000-7327499\", # \"chr4:7339500-7339999\", # \"chr4:7344500-7344999\" # )  links <- MOCHA::getCoAccessibleLinks(   SampleTileObj = SampleTileMatrices,   cellPopulation = cellPopulation,   regions = regions,   windowSize = 1 * 10^6,   numCores = numCores,   verbose = TRUE )  # Optionally filter these links by their absolute # correlation - this output also adds the chromosome, # start, and end site of each link to the table.  MOCHA::filterCoAccessibleLinks(links, threshold = 0.4)"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"signac","dir":"Articles","previous_headings":"","what":"Importing from Signac","title":"Importing From Other Sources","text":"vignette follow Signac tutorial generate Signac object label cell types within . already Signac object cell types labelled, skip section Extract Fragments Signac","code":"library(Signac) library(Seurat) library(SeuratDisk) library(EnsDb.Hsapiens.v86) library(BSgenome.Hsapiens.UCSC.hg38) set.seed(1234)"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"signac-tutorial-through-clustering","dir":"Articles","previous_headings":"Importing from Signac","what":"Signac Tutorial Through Clustering","title":"Importing From Other Sources","text":"Label cell types:","code":"# Download files system('wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5') system('wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz') system('wget https://cf.10xgenomics.com/samples/cell-arc/1.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz.tbi')  # Load in ATAC and RNA data counts <- Read10X_h5(\"pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5\") fragpath <- \"pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz\" # create a Seurat object containing the RNA adata pbmc <- CreateSeuratObject(   counts = counts$`Gene Expression`,   assay = \"RNA\" )  # create ATAC assay and add it to the object pbmc[[\"ATAC\"]] <- CreateChromatinAssay(   counts = counts$Peaks,   sep = c(\":\", \"-\"),   fragments = fragpath,   annotation = annotation )  DefaultAssay(pbmc) <- \"ATAC\" pbmc <- NucleosomeSignal(pbmc) pbmc <- TSSEnrichment(pbmc)  pbmc <- subset(   x = pbmc,   subset = nCount_ATAC < 100000 &     nCount_RNA < 25000 &     nCount_ATAC > 1000 &     nCount_RNA > 1000 &     nucleosome_signal < 2 &     TSS.enrichment > 1 )  # Transform RNA  DefaultAssay(pbmc) <- \"RNA\" pbmc <- SCTransform(pbmc) pbmc <- RunPCA(pbmc) pbmc[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc, pattern = \"^MT-\") # load PBMC reference system('wget https://atlas.fredhutch.org/data/nygc/multimodal/pbmc_multimodal.h5seurat') reference <- LoadH5Seurat(\"pbmc_multimodal.h5seurat\") DefaultAssay(pbmc) <- \"SCT\"  # transfer cell type labels from reference to query transfer_anchors <- FindTransferAnchors(   reference = reference,   query = pbmc,   normalization.method = \"SCT\",   reference.reduction = \"spca\",   recompute.residuals = FALSE,   dims = 1:50 )  predictions <- TransferData(   anchorset = transfer_anchors,    refdata = reference$celltype.l2,   weight.reduction = pbmc[['pca']],   dims = 1:50 )  pbmc <- AddMetaData(   object = pbmc,   metadata = predictions ) # set the cell identities to the cell type predictions Idents(pbmc) <- \"predicted.id\"  # set a reasonable order for cell types to be displayed when plotting levels(pbmc) <- c(\"CD4 Naive\", \"CD4 TCM\", \"CD4 CTL\", \"CD4 TEM\", \"CD4 Proliferating\",                   \"CD8 Naive\", \"dnT\",                  \"CD8 TEM\", \"CD8 TCM\", \"CD8 Proliferating\", \"MAIT\", \"NK\", \"NK_CD56bright\",                  \"NK Proliferating\", \"gdT\",                  \"Treg\", \"B naive\", \"B intermediate\", \"B memory\", \"Plasmablast\",                  \"CD14 Mono\", \"CD16 Mono\",                  \"cDC1\", \"cDC2\", \"pDC\", \"HSPC\", \"Eryth\", \"ASDC\", \"ILC\", \"Platelet\")  saveRDS(pbmc, 'pbmc_Signac_tutorial.rds')"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"extract-frags-signac","dir":"Articles","previous_headings":"Importing from Signac","what":"Extract Fragments from Signac Object","title":"Importing From Other Sources","text":"Signac’s training dataset one sample, simulate multiple samples, duplicate data . necessary large dataset. larger dataset, interact fragObj list extract fragments.tsv.gz file. Instead, ’re just duplicating data sake tutorial. importantly, need modify barcode fragment file matches barcodes Seurat’s metadata.","code":"pbmc <- readRDS('pbmc_Signac_tutorial.rds')  DefaultAssay(pbmc) <- 'ATAC' fragObj <- Fragments(pbmc) full_pbmc <- merge(   pbmc,    y = c(pbmc, pbmc),    add.cell.ids = c('Sample1', 'Sample2', 'Sample3'),   project = 'DuplicateData' ) fragList <- parallel::mclapply(1:3, function(x){     frags <- read.table(GetFragmentData(fragObj[[1]]))     names(frags) <- c('chr', 'start', 'end', 'barcode', 'val')     frags$barcode <- paste(\"Sample\",x,\"_\", frags$barcode, sep ='')     frags }, mc.cores = 3) names(fragList) <- c('Sample1', 'Sample2', 'Sample3')"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"format-metadata-and-fragments-for-mocha","dir":"Articles","previous_headings":"Importing from Signac","what":"Format metadata and fragments for MOCHA","title":"Importing From Other Sources","text":"Generate sample/cell type list finding combinations Samples Cell Populations must also rename GRangesList names format CellPopulation#Sample. Calculate study signal (median number fragments per cell)","code":"celltype_sample_list <- apply(expand.grid(unique(pbmc@meta.data$predicted.id), names(fragList)), 1, paste, collapse = \"#\") # Extract metadata, add the Sample column, as well as CellBarcode.  fullMeta <- full_pbmc@meta.data fullMeta$Sample = gsub(\"_.*\",\"\", rownames(full_pbmc@meta.data)) fullMeta$CellBarcode = gsub(\".*_\",\"\", rownames(full_pbmc@meta.data))  # Change the CellPopulation_Sample format to CellPopulation#Sample for MOCHA rownames(fullMeta) <- gsub(\"_\",\"#\", rownames(fullMeta)) CellType_GRanges <- pbapply::pblapply(cl = 30, celltype_sample_list, function(x){   celltype <- gsub(\"#.*\",\"\", x)   sample <- gsub(\".*#\",\"\", x)   sortedMeta <- dplyr::filter(fullMeta, predicted.id == celltype, Sample == sample)   sortedFrags <- dplyr::filter(fragList[[sample]], barcode %in% rownames(sortedMeta))   makeGRangesFromDataFrame(sortedFrags, keep.extra.columns = TRUE) })  names(CellType_GRanges) <- celltype_sample_list avg_reads <- lapply(fragList, function(x){                 filtFrag <- dplyr::filter(as.data.frame(x), barcode  %in% rownames(fullMeta))                 as.vector(table(filtFrag$barcode))     }) studySignal <- median(unlist(avg_reads))"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"call-open-tiles-with-mocha","dir":"Articles","previous_headings":"Importing from Signac","what":"Call Open Tiles with MOCHA","title":"Importing From Other Sources","text":"","code":"# Our blacklist comes included with Signac blackList <- blacklist_hg38_unified # Call Open Tiles tileResults <- MOCHA::callOpenTiles(ATACFragments = CellType_GRanges,                              cellColData = fullMeta,                               blackList = blackList,                               genome = 'BSgenome.Hsapiens.UCSC.hg38',                              cellPopLabel = 'predicted.id',                              cellPopulations = fullMeta$predicted.id,                              studySignal = studySignal,                              cellCol = 'barcode',                              TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",                              Org = \"org.Hs.eg.db\",                              outDir = paste(getwd(),'/MOCHA_Out', sep = ''), numCores= 35)  TSAM <- MOCHA::getSampleTileMatrix(tileResults, threshold = 0.2, numCores = 3, verbose = TRUE)"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"snapatac","dir":"Articles","previous_headings":"","what":"Importing from SnapATAC","title":"Importing From Other Sources","text":"example, follow SnapATAC 10X PBMC tutorial clustering step extracting fragments cell metadata necessary MOCHA. fully-formed Snap file analysis clustering results sample information added metadata, skip section Formatting Snap File Metadata. following vignette, STRONGLY recommending installing patched version SnapATAC repository devtools::install_github(\"imran-aifi/SnapATAC\").","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"snapatac-tutorial-through-clustering","dir":"Articles","previous_headings":"Importing from SnapATAC","what":"SnapATAC Tutorial through Clustering","title":"Importing From Other Sources","text":"Download SnapATAC Tutorial Data (linked ) working directory, load :","code":"# CLI tool for installing from Google Drive share links pip install gdown # https://drive.google.com/file/d/1YiYd_Ydes3tqsJGpNuqQquUOoVj2EEjE/view?usp=share_link gdown https://drive.google.com/uc?id=1YiYd_Ydes3tqsJGpNuqQquUOoVj2EEjE # https://drive.google.com/file/d/1NvGn4M2_HD06PL5Nj2if5xO-uVA0y8Q5/view?usp=share_link gdown https://drive.google.com/uc?id=1NvGn4M2_HD06PL5Nj2if5xO-uVA0y8Q5 # https://drive.google.com/file/d/1LUOqsXoQN6lVx-4RNlgH90e5oXQ0y9Bd/view?usp=share_link gdown https://drive.google.com/uc?id=1LUOqsXoQN6lVx-4RNlgH90e5oXQ0y9Bd # https://drive.google.com/file/d/1oMJ6wFsfS-q-sY_yaLEtnYebM7RrBix6/view?usp=share_link gdown https://drive.google.com/uc?id=1oMJ6wFsfS-q-sY_yaLEtnYebM7RrBix6 # https://drive.google.com/file/d/1SEFZ5CJgcmoAkmo4_1kCMYS60YOFP379/view?usp=share_link gdown https://drive.google.com/uc?id=1SEFZ5CJgcmoAkmo4_1kCMYS60YOFP379 # https://drive.google.com/file/d/1RlBvTCqz6mhaTAkfYiCdeojD-U2mN2wp/view?usp=share_link gdown https://drive.google.com/uc?id=1RlBvTCqz6mhaTAkfYiCdeojD-U2mN2wp library(SnapATAC); snap.files = c(   \"atac_pbmc_5k_nextgem.snap\",    \"atac_pbmc_10k_nextgem.snap\" ); sample.names = c(   \"PBMC 5K\",   \"PBMC 10K\" ); barcode.files = c(   \"atac_pbmc_5k_nextgem_singlecell.csv\",   \"atac_pbmc_10k_nextgem_singlecell.csv\" ); x.sp.ls = lapply(seq(snap.files), function(i){   createSnap(       file=snap.files[i],       sample=sample.names[i]   ); }) names(x.sp.ls) = sample.names; barcode.ls = lapply(seq(snap.files), function(i){   barcodes = read.csv(       barcode.files[i],        head=TRUE   );   barcodes = barcodes[2:nrow(barcodes),];   barcodes$logUMI = log10(barcodes$passed_filters + 1);   barcodes$promoter_ratio = (barcodes$promoter_region_fragments+1) / (barcodes$passed_filters + 1);   barcodes }) x.sp.ls # for both datasets, we identify usable barcodes using [3.5-5] for log10(UMI) and [0.4-0.8] for promoter ratio as cutoff. cutoff.logUMI.low = c(3.5, 3.5); cutoff.logUMI.high = c(5, 5); cutoff.FRIP.low = c(0.4, 0.4); cutoff.FRIP.high = c(0.8, 0.8); barcode.ls = lapply(seq(snap.files), function(i){   barcodes = barcode.ls[[i]];   idx = which(       barcodes$logUMI >= cutoff.logUMI.low[i] &        barcodes$logUMI <= cutoff.logUMI.high[i] &        barcodes$promoter_ratio >= cutoff.FRIP.low[i] &       barcodes$promoter_ratio <= cutoff.FRIP.high[i]   );   barcodes[idx,] }); x.sp.ls = lapply(seq(snap.files), function(i){   barcodes = barcode.ls[[i]];   x.sp = x.sp.ls[[i]];   barcode.shared = intersect(x.sp@barcode, barcodes$barcode);   x.sp = x.sp[match(barcode.shared, x.sp@barcode),];   barcodes = barcodes[match(barcode.shared, barcodes$barcode),];   x.sp@metaData = barcodes;   x.sp }) names(x.sp.ls) = sample.names; x.sp.ls # combine two snap object x.sp = Reduce(snapRbind, x.sp.ls); x.sp@metaData[\"Sample\"] = x.sp@sample; print(table(x.sp@sample)) x.sp # Step 2. Add cell-by-bin matrix x.sp = addBmatToSnap(x.sp, bin.size=5000); # Step 3. Matrix binarization x.sp = makeBinary(x.sp, mat=\"bmat\"); # Step 4. Bin filtering library(GenomicRanges); black_list = read.table(\"hg19.blacklist.bed.gz\"); black_list.gr = GRanges(   black_list[,1],    IRanges(black_list[,2], black_list[,3]) ); idy = queryHits(   findOverlaps(x.sp@feature, black_list.gr) ); if(length(idy) > 0){   x.sp = x.sp[,-idy, mat=\"bmat\"]; }; x.sp  # Remove unwanted chromosomes chr.exclude = seqlevels(x.sp@feature)[grep(\"random|chrM\", seqlevels(x.sp@feature))]; idy = grep(paste(chr.exclude, collapse=\"|\"), x.sp@feature); if(length(idy) > 0){   x.sp = x.sp[,-idy, mat=\"bmat\"] }; x.sp # The coverage of bins roughly obeys a log normal distribution. We remove the top 5% bins that overlap with invariant features such as the house keeping gene promoters. bin.cov = log10(Matrix::colSums(x.sp@bmat)+1); hist(   bin.cov[bin.cov > 0],    xlab=\"log10(bin cov)\",    main=\"log10(Bin Cov)\",    col=\"lightblue\",    xlim=c(0, 5) ); bin.cutoff = quantile(bin.cov[bin.cov > 0], 0.95); idy = which(bin.cov <= bin.cutoff & bin.cov > 0); x.sp = x.sp[, idy, mat=\"bmat\"]; x.sp  # We will further remove any cells of bin coverage less than 1,000. The rational behind this is that some cells may have high number of unique fragments but end up with low bin coverage after filtering. This step is optional but highly recommended. idx = which(Matrix::rowSums(x.sp@bmat) > 1000); x.sp = x.sp[idx,]; x.sp # Step 5. Dimensionality reduction row.covs.dens <- density(   x = x.sp@metaData[,\"logUMI\"],    bw = 'nrd', adjust = 1 ); sampling_prob <- 1 / (approx(x = row.covs.dens$x, y = row.covs.dens$y, xout = x.sp@metaData[,\"logUMI\"])$y + .Machine$double.eps); set.seed(1); idx.landmark.ds <- sort(sample(x = seq(nrow(x.sp)), size = 10000, prob = sampling_prob)); x.landmark.sp = x.sp[idx.landmark.ds,]; x.query.sp = x.sp[-idx.landmark.ds,]; x.landmark.sp = runDiffusionMaps(   obj= x.landmark.sp,   input.mat=\"bmat\",    num.eigs=50 ); x.landmark.sp@metaData$landmark = 1; x.query.sp = runDiffusionMapsExtension(   obj1=x.landmark.sp,    obj2=x.query.sp,   input.mat=\"bmat\" ); x.query.sp@metaData$landmark = 0; x.sp = snapRbind(x.landmark.sp, x.query.sp); x.sp = x.sp[order(x.sp@metaData[\"sample\"])]; x.sp = runKNN(   obj=x.sp,   eigs.dims=1:20,   k=15 ); x.sp=runCluster(   obj=x.sp,   tmp.folder=tempdir(),   louvain.lib=\"R-igraph\", #\"leiden\" preferred, but may cause issues. Requires 'library(leiden)'.   seed.use=10,   resolution=0.7 )"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"format-metadata","dir":"Articles","previous_headings":"Importing from SnapATAC","what":"Format Snap File Metadata","title":"Importing From Other Sources","text":"Add computed clusters Snap object metadata. Snap object contains two samples, “PBMC 5K” “PBMC 10K”. Let’s add “Sample” column metadata. Let’s also add column “files” pointing original .snap files cell came.","code":"# Add clusters (from SnapATAC::runCluster) to metadata x.sp@metaData$cluster = x.sp@cluster  # Add Sample name to metadata (if not done previously) x.sp@metaData$Sample = x.sp@sample  # Add files to metadata, indicating the original snap file each cell belongs to. snap.files <- c(   \"atac_pbmc_5k_nextgem.snap\",    \"atac_pbmc_10k_nextgem.snap\" ) fileList <- unlist(lapply(x.sp@metaData$Sample, function(x){   ifelse(x == \"PBMC 5K\", snap.files[[1]],snap.files[[2]]) })) x.sp@metaData$files <- fileList  # SAVE this metadata to disk write.csv(x.sp@metaData, \"./snapMetadataforMOCHA.csv\")"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"extract-fragments","dir":"Articles","previous_headings":"Importing from SnapATAC","what":"Extract Fragments from Snap File","title":"Importing From Other Sources","text":"Now Snap object metadata containing barcodes, unique cell ids (column cell_id), sample names, cell populations (cluster). also HG19 blackList, black_list.gr. Note: Following tutorial SnapATAC can often result segfault extracting fragments SnapATAC::extractReads. recommend running machine large RAM avoiding parallelization. Next extract reads sample cell population, ensuring final GRanges list named following pattern CellPopulation#Sample. Calculate study signal (median number fragments per cell)","code":"snapMetadata <- read.csv(\"./snapMetadataforMOCHA.csv\") cellCol <- \"barcode\" cellPopLabel <- \"cluster\" cellPopulations <- unique(snapMetadata$cluster) allSamples <- unique(snapMetadata$Sample)  fragmentsGRangesList <- unlist(lapply(allSamples, function(sample){   barcodesList <- lapply(cellPopulations, function(cellPop) {     snapMetadata[snapMetadata$Sample == sample,]     # Extract barcodes for a single cell population     cellPopIdx <- snapMetadata$cluster == cellPop     cellPopBarcodes <- snapMetadata[cellPopIdx,]$barcode          # Build the file list for the selected cell barcode     files <- snapMetadata[cellPopIdx,]$files          # Extract fragments     cellPopFrags <- SnapATAC::extractReads(cellPopBarcodes, files, do.par = FALSE)   })   names(barcodesList) <- paste(cellPopulations, sample, sep=\"#\")   barcodesList })) avg_reads <- lapply(fragmentsGRangesList, function(x){   filtFrag <- dplyr::filter(as.data.frame(x), barcode  %in% snapMetadata$barcode)   as.vector(table(filtFrag$barcode)) }) studySignal <- median(unlist(avg_reads))"},{"path":"https://aifimmunology.github.io/MOCHA/articles/ImportingFromOtherSources.html","id":"call-tiles","dir":"Articles","previous_headings":"Importing from SnapATAC","what":"Call Open Tiles with MOCHA","title":"Importing From Other Sources","text":"","code":"# Call Open Tiles tileResults <- MOCHA::callOpenTiles(   ATACFragments = fragmentsGRangesList,   cellColData = snapMetadata,    blackList = black_list.gr,    genome = \"BSgenome.Hsapiens.UCSC.hg38\",   cellPopLabel = cellPopLabel,   cellPopulations = cellPopulations,   studySignal = studySignal,   cellCol = cellCol,   TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",   Org = \"org.Hs.eg.db\",    outDir = paste(getwd(),'/MOCHA_Out', sep = ''),    numCores = 5 )  TSAM <- MOCHA::getSampleTileMatrix(tileResults, threshold = 0.2, numCores = 3, verbose = TRUE)"},{"path":"https://aifimmunology.github.io/MOCHA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samir Rachid Zaim. Author, contributor. Mark-Phillip Pebworth. Author, contributor. Imran McGrath. Author, maintainer. Lauren Okada. Author, contributor. Xiaojun Li. Author, contributor.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rachid Zaim S, Pebworth M, McGrath , Okada L, Li X (2023). MOCHA: Modeling Single-Cell Open Chromatin Analysis. https://aifimmunology.github.io/MOCHA/, https://github.com/aifimmunology/MOCHA.","code":"@Manual{,   title = {MOCHA: Modeling for Single-Cell Open Chromatin Analysis},   author = {Samir {Rachid Zaim} and Mark-Phillip Pebworth and Imran McGrath and Lauren Okada and Xiaojun Li},   year = {2023},   note = {https://aifimmunology.github.io/MOCHA/, https://github.com/aifimmunology/MOCHA}, }"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"mocha-model-based-single-cell-open-chromatin-analysis","dir":"","previous_headings":"","what":"Modeling for Single-Cell Open Chromatin Analysis","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"MOCHA R package meant enable robust sample-specific scATAC analysis providing novel single-cell peak-calling algorithm leveraging latest zero-inflated statistical methods. hope package enable translational research scATAC datasets addressing statistical issues around peak calling, differential accessibility, co-accessibility, repeated measures. goal enable intuitive robust identification open chromatin, differential accessibility, co-accessibility biomedical researchers can leverage scATAC datasets identify therapeutic targets. Find visiting MOCHA website.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Installation Overview Contact","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Install binaries (stable release CRAN): Install source: Install specific development branch source:","code":"install.packages(\"MOCHA\") devtools::install_github(\"aifimmunology/MOCHA\") devtools::install_github(\"aifimmunology/MOCHA\", ref = \"your_branch_name\")"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-usage-overview","dir":"","previous_headings":"","what":"Usage Overview","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Please view example usage found vignette found vignettes/COVID-walkthrough.html. example usage demonstrates workflow: Workflow","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-contact","dir":"","previous_headings":"","what":"Contact","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"pipeline can run function--function, may wish inspect intermediate results use end results custom analyses. MOCHA outputs use common Bioconductor data structures. also provide getters accessing specific results.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"callopentiles-results","dir":"","previous_headings":"","what":"callOpenTiles results","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"output first step pipeline, MOCHA::callOpenTiles MultiAssayExperiment organizing open-tiles cell population. input next function, MOCHA::getSampleTileMatrices. Sample-level metadata can accessed using colData(tileResults). specific cell population’s results stored RaggedExperiment. object stores ranged data alongside sample-level metadata.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"getsampletilematrix-results","dir":"","previous_headings":"","what":"getSampleTileMatrix results","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"output getSampleTileMatrix SummarizedExperiment organizing TSAM (Tile Sample Accessibility Matrix) cell population. input MOCHA::getDifferentialAccessibleTiles downstream analyses. also holds metadata related genome, transcript database, annotations: metadata(SampleTileMatrices)","code":"## Subset results for Chr 4 > SampleTileMatrices[grep('chr4', rownames(SampleTileMatrices)),] class: RangedSummarizedExperiment  dim: 8112 39  metadata(6): CellCounts FragmentCounts ... OrgDb Directory assays(1): CD16 Mono rownames(8112): chr4:10005500-10005999 chr4:10006000-10006499 ...   chr4:99961000-99961499 chr4:99961500-99961999 rowData names(1): CD16 Mono colnames(39): B011-AP0C1W3 B011-AP0C1W8 ... FSQEAZ0C2D3-02   FSQFAZ0BZJQ-02 colData names(186): Sample well_id ... ATAC_WellID AIFI.Batch"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"getdifferentialaccessibletiles-results","dir":"","previous_headings":"","what":"getDifferentialAccessibleTiles results","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Results MOCHA::getDifferentialAccessibleTiles given either data.table ‘granges’ can filtered accordingly:","code":"> head(plyranges::filter(differentials, seqnames =='chr4' & FDR < 0.2)) GRanges object with 6 ranges and 13 metadata columns:       seqnames              ranges strand |                   Tile          <Rle>           <IRanges>  <Rle> |            <character>   [1]     chr4   10023500-10023999      * | chr4:10023500-10023999   [2]     chr4   10024000-10024499      * | chr4:10024000-10024499   [3]     chr4   10063500-10063999      * | chr4:10063500-10063999   [4]     chr4   10096500-10096999      * | chr4:10096500-10096999   [5]     chr4     1010500-1010999      * |   chr4:1010500-1010999   [6]     chr4 101346000-101346499      * | chr4:101346000-10134..       CellPopulation  Foreground  Background     P_value Test_Statistic          <character> <character> <character>   <numeric>      <numeric>   [1]      CD16 Mono    Positive    Negative 0.002610899       11.89612   [2]      CD16 Mono    Positive    Negative 0.023560228        7.49639   [3]      CD16 Mono    Positive    Negative 0.000421733       12.43336   [4]      CD16 Mono    Positive    Negative 0.006561717       10.05301   [5]      CD16 Mono    Positive    Negative 0.016701496        5.72747   [6]      CD16 Mono    Positive    Negative 0.006274534        7.46972             FDR  Log2FC_C   MeanDiff Avg_Intensity_Case Pct0_Case       <numeric> <numeric>  <numeric>          <numeric> <numeric>   [1] 0.0788621  1.023296  2.9715709            12.3478 0.0000000   [2] 0.1910923  0.648633 -0.0879542            12.2027 0.0588235   [3] 0.0451423  0.786501  0.7773734            12.8422 0.0000000   [4] 0.1124369  0.739042  1.3575321            13.0183 0.0000000   [5] 0.1628641 -0.476150 -0.4293368            13.6077 0.0000000   [6] 0.1091473 -0.397274 -0.3913687            13.1689 0.0000000       Avg_Intensity_Control Pct0_Control                   <numeric>    <numeric>   [1]               11.1988    0.1818182   [2]               11.4155    0.0000000   [3]               12.0881    0.0000000   [4]               12.2886    0.0454545   [5]               14.2039    0.0000000   [6]               13.5651    0.0000000   -------   seqinfo: 24 sequences from an unspecified genome; no seqlengths"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"getcoaccessiblelinks-results","dir":"","previous_headings":"","what":"getCoAccessibleLinks results","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Results MOCHA::getCoAccessibleLinks given data.frame can filtered according correlation using MOCHA::filterCoAccessibleLinks.","code":"> head(links)    Correlation                  Tile1                  Tile2 1:  0.06203363 chr4:10023500-10023999 chr4:10005500-10005999 2: -0.07812306 chr4:10023500-10023999 chr4:10006000-10006499 3:  0.06192133 chr4:10023500-10023999 chr4:10006500-10006999 4:  0.25329153 chr4:10023500-10023999 chr4:10007000-10007499 5:  0.09938466 chr4:10023500-10023999 chr4:10013500-10013999 6:  0.03643015 chr4:10023500-10023999 chr4:10015000-10015499   > MOCHA::filterCoAccessibleLinks(links, threshold = 0.4)    Correlation                  Tile1                  Tile2  chr    start      end 1:   0.5035455 chr4:10023500-10023999 chr4:10024000-10024499 chr4 10023500 10024499 2:   0.5121115 chr4:10023500-10023999 chr4:10063500-10063999 chr4 10023500 10063999 3:   0.4059254 chr4:10023500-10023999 chr4:10078000-10078499 chr4 10023500 10078499 4:   0.4003500 chr4:10023500-10023999 chr4:10096500-10096999 chr4 10023500 10096999 5:   0.4367843 chr4:10023500-10023999 chr4:10106500-10106999 chr4 10023500 10106999"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-contact-1","dir":"","previous_headings":"","what":"Contact","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"contact developers issues feature requests, please contact us via discussions tab feature requests, open issues bugs.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-license","dir":"","previous_headings":"","what":"License","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"MOCHA follows Allen Institute Software License - full information license can found LICENSE file.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","title":"Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"GRangesToString Turns GRanges Object  list strings format chr1:100-200","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"","code":"GRangesToString(GR_obj)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"GR_obj GRanges object convert string","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"string list strings format 'chr1:100-200' representing  ranges input GRanges","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for enrichment of motifs against a background — MotifEnrichment","title":"Test for enrichment of motifs against a background — MotifEnrichment","text":"Test enrichment motifs within Group1 background   Group2 using hypergeometric t-test.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for enrichment of motifs against a background — MotifEnrichment","text":"","code":"MotifEnrichment(Group1, Group2, motifPosList, type = NULL)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for enrichment of motifs against a background — MotifEnrichment","text":"Group1 GRanges object, set significant differential tiles. Group2 GRanges object containing background regions, non-overlapping Group1 motifPosList GRangesList motifs positions motif. Must named motif. type Optional, name metadata column Group1 Group2 test enrichment number unique entries column given 'type'. Default NULL, tests number Ranges.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for enrichment of motifs against a background — MotifEnrichment","text":"data.frame containing enrichment group","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifSetEnrichmentAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the enrichment of a given TF\n  motif set against a motif set downstream of multiple ligands — MotifSetEnrichmentAnalysis","title":"Test the enrichment of a given TF\n  motif set against a motif set downstream of multiple ligands — MotifSetEnrichmentAnalysis","text":"analogous Gene Set   Enrichment Analysis. Instead testing enrichment geneset   given gene set pathway, testing enrichment given TF   motif set motif set downstream multiple ligands.   enrichment, sign ligand drive set motifs.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifSetEnrichmentAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the enrichment of a given TF\n  motif set against a motif set downstream of multiple ligands — MotifSetEnrichmentAnalysis","text":"","code":"MotifSetEnrichmentAnalysis(   ligandTFMatrix,   motifEnrichmentDF,   motifColumn,   ligands,   statColumn,   statThreshold,   annotationName = \"CellType\",   annotation = \"none\",   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifSetEnrichmentAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the enrichment of a given TF\n  motif set against a motif set downstream of multiple ligands — MotifSetEnrichmentAnalysis","text":"ligandTFMatrix NicheNet Ligand-TF matrix motifEnrichmentDF Dataframe (unfiltered) ArchR's peakAnnoEnrich step. Expected column motif names, column -log10 adjusted p-values. motifColumn Column name within motifEnrichmentDF motif names. ligands Vector ligands test statColumn Column name motifEnrichmentDF containing statistic test statThreshold Significance threshold used select significant motif set annotationName Optional column name annotation. Default \"CellType\". annotation Optional annotation value added rows output motif dataframe. Can character vector numeric. Default \"none\". numCores number cores use multiprocessing. Default 1. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifSetEnrichmentAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the enrichment of a given TF\n  motif set against a motif set downstream of multiple ligands — MotifSetEnrichmentAnalysis","text":"specDF dataframe containing enrichment analysis results","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Turns a list of strings in the format chr1:100-200 into a GRanges object — StringsToGRanges","title":"Turns a list of strings in the format chr1:100-200 into a GRanges object — StringsToGRanges","text":"StringsToGRanges Turns list strings format chr1:100-200   GRanges object","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turns a list of strings in the format chr1:100-200 into a GRanges object — StringsToGRanges","text":"","code":"StringsToGRanges(regionString)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turns a list of strings in the format chr1:100-200 into a GRanges object — StringsToGRanges","text":"regionString string list strings format chr1:100-200","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turns a list of strings in the format chr1:100-200 into a GRanges object — StringsToGRanges","text":"GRanges object ranges representing input string(s)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":null,"dir":"Reference","previous_headings":"","what":"Add difference in accessibility between two conditions — addAccessibilityShift","title":"Add difference in accessibility between two conditions — addAccessibilityShift","text":"addAccessibilityShift add new condition SummarizedExperiment output extractRegion, \t\t\t\t\t\t\t\tcontain difference accessibility two conditions","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add difference in accessibility between two conditions — addAccessibilityShift","text":"","code":"addAccessibilityShift(CountSE, foreground, background, assayName = NULL)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add difference in accessibility between two conditions — addAccessibilityShift","text":"CountSE SummarizedExperiment object output extractRegion foreground Group used foreground subtraction accessibility background Group used background subtraction accessibility assayName name given new assay difference accessibility foreground background.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add difference in accessibility between two conditions — addAccessibilityShift","text":"countSE SummarizedExperiment containing coverage given input cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add difference in accessibility between two conditions — addAccessibilityShift","text":"","code":"if (FALSE) { # CountSE is a SummarizedExperiment generated by extractRegion() countSE <- MOCHA::addAccessibilityShift(   CountSE = CountSE,   foreground = \"Condition1\",   background = \"Condition2\",   assayName = \"AccessibilityChanges\" ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify motifs within a peakset — addMotifSet","title":"Identify motifs within a peakset — addMotifSet","text":"addMotifSet Identify motifs within peakset.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify motifs within a peakset — addMotifSet","text":"","code":"addMotifSet(   SampleTileObj,   motifPWMs,   w = 7,   returnSTM = TRUE,   motifSetName = \"Motifs\" )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify motifs within a peakset — addMotifSet","text":"SampleTileObj SummarizedExperiment, specifically output getSampleTileMatrix motifPWMs pwms object motif database. Either PFMatrix, PFMatrixList, PWMatrix, PWMatrixList w Parameter motifmatchr controlling size basepairs window filtration. Default 7. returnSTM TRUE, return modified SampleTileObj motif set added metadata (default). FALSE, return just motifs motifmatchr. motifSetName Name give motifList SampleTileObj's metadata `returnSTM=TRUE`. Default 'Motifs'.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify motifs within a peakset — addMotifSet","text":"modified SampleTileObj motifs added metadata","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify motifs within a peakset — addMotifSet","text":"","code":"if (FALSE) { # load a curated motif set from library(chromVARmotifs) # included with ArchR installation data(human_pwms_v2) SE_with_motifs <- addMotifSet(   SampleTileObj,   motifPWMs = human_pwms_v2,   returnSTM = TRUE, motifSetName = \"Motifs\", w = 7 ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate tiles with gene annotations — annotateTiles","title":"Annotate tiles with gene annotations — annotateTiles","text":"annotateTiles annotates set sample-tile matrices   given gene annotations. Details TxDb Org annotation packages   available annotations can found Bioconductor:   https://bioconductor.org/packages/3.15/data/annotation/","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate tiles with gene annotations — annotateTiles","text":"","code":"annotateTiles(Obj, TxDb = NULL, Org = NULL, promoterRegion = c(2000, 100))"},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate tiles with gene annotations — annotateTiles","text":"Obj RangedSummarizedExperiment generated getSampleTileMatrix, containing TxDb Org metadata. may also GRanges object. TxDb annotation package TxDb object genome. Optional, required Obj GRanges. Org genome-wide annotation organism. Optional, required Obj GRanges. promoterRegion Optional list containing window size basepairs defining promoter region. format (upstream, downstream). Default (2000, 100).","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate tiles with gene annotations — annotateTiles","text":"Obj, input data structure added gene annotations (whether GRanges SampleTileObj)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate tiles with gene annotations — annotateTiles","text":"","code":"if (FALSE) { library(TxDb.Hsapiens.UCSC.hg38.refGene) library(org.Hs.eg.db) SampleTileMatricesAnnotated <- MOCHA::annotateTiles(   SampleTileMatrices,   TxDb = TxDb.Hsapiens.UCSC.hg38.refGene,   Org = org.Hs.eg.db ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"bulkDimReduction runs dimensionality reduction (either PCA LSI)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"","code":"bulkDimReduction(   SampleTileObj,   cellType = \"All\",   componentNumber = 30,   method = \"LSI\",   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix cellType vector strings. Cell subsets call peaks. list group names must identical names appear SampleTileObj.  Optional, cellPopulations='', peak calling done cell populations. Default ''. componentNumber integer. Number components include LSI, PCA must strictly less method string. Represents method use. Includes LSI PCA, recommend PCA scATAC pseudobulk. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"SEObj SummarizedExperiment containing PC components dimensionality reduction metadata SampleTileObj","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"LSI method adapted Andrew Hill: http://andrewjohnhill.com/blog/2019/05/06/dimensionality-reduction--scatac-data/","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkDimReduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run PCA or LSI dimensionality reduction on tiles — bulkDimReduction","text":"","code":"if (FALSE) { LSIObj <- MOCHA::bulkDimReduction(SampleTileObj, cellType = \"CD16_Mono\") }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate UMAP from pseudobulk LSI results — bulkUMAP","title":"Generate UMAP from pseudobulk LSI results — bulkUMAP","text":"bulkUMAP generates UMAP pseudobulk LSIObj object bulkDimReduction","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate UMAP from pseudobulk LSI results — bulkUMAP","text":"","code":"bulkUMAP(   SEObj,   assay = \"LSI\",   components = c(1:30),   nNeighbors = 15,   returnModel = FALSE,   seed = 1,   ... )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate UMAP from pseudobulk LSI results — bulkUMAP","text":"SEObj SummarizedExperiment object output bulkDimReduction, STM, subset just one cell type. assay string, describing name assay within SEObj run UMAP ('PCA', 'LSI', 'counts'). components vector integers. Number components include LSI (1:30 typically). nNeighbors See  umap. size local neighborhood (terms number neighboring sample points) used manifold approximation. Default 15. returnModel boolean. Default FALSE. set true, return list, first UMAP coordinates metadata plotting, second full UMAP model projection can occur. seed integer. Represents random seed pass UMAP. Default seed 1. ... Additional arguments passed umap.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkUMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate UMAP from pseudobulk LSI results — bulkUMAP","text":"fullUMAP data.frame UMAP values metadata attached.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/bulkUMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate UMAP from pseudobulk LSI results — bulkUMAP","text":"","code":"if (FALSE) { UMAPvalues <- MOCHA::bulkUMAP(LSIObj) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","title":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","text":"callOpenTiles main peak-calling function MOCHA   serves wrapper function call peaks provided set fragment   files ArchR Project meta-data purposes","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","text":"","code":"callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   cellCol = \"RG\",   TxDb,   OrgDb,   outDir,   numCores = 30,   verbose = FALSE,   force = FALSE )  # S4 method for GRangesList callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   cellCol = \"RG\",   TxDb,   OrgDb,   outDir,   numCores = 30,   verbose = FALSE,   force = FALSE )  # S4 method for list callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   cellCol = \"RG\",   TxDb,   OrgDb,   outDir,   numCores = 30,   verbose = FALSE,   force = FALSE )  .callOpenTiles_ArchR(   ATACFragments,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   TxDb,   OrgDb,   outDir = NULL,   numCores = 30,   verbose = FALSE,   force = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","text":"ATACFragments ArchR Project, GRangesList fragments. GRanges GRanges list must unique cell IDs column given 'cellCol'. cellColData DataFrame containing cell-level metadata. must contain column 'Sample' unique sample IDs column specified 'cellPopLabel'. blackList GRanges blacklisted regions genome BSgenome object, full name installed BSgenome data package, short string specifying name NCBI assembly (e.g. \"GRCh38\", \"TAIR10.1\", etc...) UCSC genome (e.g. \"hg38\", \"bosTau9\", \"galGal6\", \"ce11\", etc...). supplied short string must refer unambiguously installed BSgenome data package. See getBSgenome. cellPopLabel string indicating column ArchRProject metadata contains cell population label. cellPopulations vector strings. Cell subsets call peaks. list group names must identical names appear ArchRProject metadata.  Optional, cellPopulations='', peak calling done cell populations ArchR project metadata. Default ''. studySignal median signal (number fragments) study. set, calculated using input ArchR project relies assumption ArchR project encompasses whole study (.e. subset). cellCol column cellColData specifying unique cell ids barcodes. Default \"RG\", unique cell identifier used ArchR. TxDb exact package name TxDb-class transcript annotation package organism (e.g. \"TxDb.Hsapiens.UCSC.hg38.refGene\"). must installed. See  Bioconductor AnnotationData Packages. OrgDb exact package name OrgDb-class genome wide annotation package organism (e.g. \"org.Hs.eg.db\"). must installed. See  Bioconductor AnnotationData Packages outDir string describing output directory coverage files. Must complete directory string. ArchR input, set outDir NULL create directory within input ArchR project directory named MOCHA saving files. numCores integer. Number cores parallelize peak-calling across multiple cell populations. verbose Set TRUE display additional messages. Default FALSE. force Optional, whether force creation coverage files already exist. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","text":"tileResults MultiAssayExperiment object containing ranged data   tile","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform peak-calling on a set of fragments or an \n  ArchR Project — callOpenTiles","text":"","code":"if (FALSE) { # Starting from an ArchR Project: tileResults <- MOCHA::callOpenTiles(   ArchRProj = myArchRProj,   cellPopLabel = \"celltype_labeling\",   cellPopulations = \"CD4\",   TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",   OrgDb = \"org.Hs.eg.db\",   numCores = 1 ) } # \\donttest{ # Starting from GRangesList if (   requireNamespace(\"BSgenome.Hsapiens.UCSC.hg19\") &&     requireNamespace(\"TxDb.Hsapiens.UCSC.hg38.refGene\") &&     requireNamespace(\"org.Hs.eg.db\") ) {   tiles <- MOCHA::callOpenTiles(     ATACFragments = MOCHA::exampleFragments,     cellColData = MOCHA::exampleCellColData,     blackList = MOCHA::exampleBlackList,     genome = \"BSgenome.Hsapiens.UCSC.hg19\",     TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",     OrgDb = \"org.Hs.eg.db\",     outDir = tempdir(),     cellPopLabel = \"Clusters\",     cellPopulations = c(\"C2\", \"C5\"),     numCores = 1   ) } #> Loading required namespace: BSgenome.Hsapiens.UCSC.hg19 #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Warning: GRanges object contains 1538 out-of-bound ranges located on sequences #>   chr1 and chr2. Note that ranges located on a sequence whose length is #>   unknown (NA) or on a circular sequence are not considered out-of-bound #>   (use seqlengths() and isCircular() to get the lengths and circularity #>   flags of the underlying sequences). You can use trim() to trim these #>   ranges. See ?`trim,GenomicRanges-method` for more information. #> Warning: GRanges object contains 2682 out-of-bound ranges located on sequences #>   chr1 and chr2. Note that ranges located on a sequence whose length is #>   unknown (NA) or on a circular sequence are not considered out-of-bound #>   (use seqlengths() and isCircular() to get the lengths and circularity #>   flags of the underlying sequences). You can use trim() to trim these #>   ranges. See ?`trim,GenomicRanges-method` for more information. # }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge the TSAM from multiple cell populations into a single matrix — combineSampleTileMatrix","title":"Merge the TSAM from multiple cell populations into a single matrix — combineSampleTileMatrix","text":"combineSampleTileMatrix combines celltypes   SampleTileMatrix object SummarizedExperiment one single matrix   across cell types samples, annotating GC bias using   chromVAR.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge the TSAM from multiple cell populations into a single matrix — combineSampleTileMatrix","text":"","code":"combineSampleTileMatrix(SampleTileObj, NAtoZero = TRUE, verbose = FALSE)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge the TSAM from multiple cell populations into a single matrix — combineSampleTileMatrix","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices NAtoZero Set NA values sample-tile matrix zero verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge the TSAM from multiple cell populations into a single matrix — combineSampleTileMatrix","text":"TileCorr data.table correlation matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a data.frame matrix to a GRanges — differentialsToGRanges","title":"Converts a data.frame matrix to a GRanges — differentialsToGRanges","text":"Converts data.frame matrix GRanges","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a data.frame matrix to a GRanges — differentialsToGRanges","text":"","code":"differentialsToGRanges(differentials, tileColumn = \"Tile\")"},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a data.frame matrix to a GRanges — differentialsToGRanges","text":"differentials matrix/data.frame column tileColumn containing region strings format \"chr:start-end\" tileColumn name column containing region strings. Default \"Tile\".","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a data.frame matrix to a GRanges — differentialsToGRanges","text":"GRanges containing original information","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Common theme for gene plots\nnoRd — .gene_plot_theme","title":"Common theme for gene plots\nnoRd — .gene_plot_theme","text":"Common theme gene plots noRd","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common theme for gene plots\nnoRd — .gene_plot_theme","text":"","code":".gene_plot_theme"},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common theme for gene plots\nnoRd — .gene_plot_theme","text":"object class list length 5.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleBlackList — exampleBlackList","title":"exampleBlackList — exampleBlackList","text":"Example input blackList extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleBlackList — exampleBlackList","text":"","code":"exampleBlackList"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleBlackList — exampleBlackList","text":"GRanges object 210 ranges 2 metadata columns","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleCellColData — exampleCellColData","title":"exampleCellColData — exampleCellColData","text":"Example input cellColData extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleCellColData — exampleCellColData","text":"","code":"exampleCellColData"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleCellColData — exampleCellColData","text":"DataFrame 2217 rows 3 columns","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleFragments — exampleFragments","title":"exampleFragments — exampleFragments","text":"Example input ATAC fragments extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). subset consists two cell populations: Clusters C2 C5. data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleFragments — exampleFragments","text":"","code":"exampleFragments"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleFragments — exampleFragments","text":"list 2 GRanges objects","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractErrorFromConsensusTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"extractErrorFromConsensusTiles — extractErrorFromConsensusTiles","title":"extractErrorFromConsensusTiles — extractErrorFromConsensusTiles","text":"extractErrorFromConsensusTiles R helper function, part   single-cell peak calling.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractErrorFromConsensusTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractErrorFromConsensusTiles — extractErrorFromConsensusTiles","text":"","code":"extractErrorFromConsensusTiles(x)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractErrorFromConsensusTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractErrorFromConsensusTiles — extractErrorFromConsensusTiles","text":"x specific output consensus tiles.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coverage for a given region — extractRegion","title":"Get coverage for a given region — extractRegion","text":"extractRegion extract coverage files created   callOpenTiles return specific region's coverage","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coverage for a given region — extractRegion","text":"","code":"extractRegion(   SampleTileObj,   region,   cellPopulations = \"ALL\",   groupColumn = NULL,   subGroups = NULL,   sampleSpecific = FALSE,   approxLimit = 1e+05,   binSize = 250,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coverage for a given region — extractRegion","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix region GRanges object vector strings containing regions interest. Strings must format \"chr:start-end\", e.g. \"chr4:1300-2222\". cellPopulations vector strings. Cell subsets call peaks. list group names must identical names appear SampleTileObj.  Optional, cellPopulations='', peak calling done cell populations. Default ''. groupColumn Optional, column containing sample group labels returning coverage within sample groups. Default NULL, samples used. subGroups list subgroup(s) within groupColumn metadata. Optional, default NULL, labels within groupColumn used. sampleSpecific TRUE, get sample-specific count dataframe . Default FALSE, average across samples get dataframe . approxLimit Optional limit region size, region larger approxLimit basepairs, binning used. Default 100000. binSize Optional, size bins basepairs binning used. Default 250. numCores integer. Number cores parallelize peak-calling across multiple cell populations verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coverage for a given region — extractRegion","text":"countSE SummarizedExperiment containing coverage given input cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coverage for a given region — extractRegion","text":"","code":"if (FALSE) { countSE <- MOCHA::extractRegion(   SampleTileObj = SampleTileMatrices,   cellPopulations = \"ALL\",   region = \"chr1:18137866-38139912\",   numCores = 30,   sampleSpecific = FALSE ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter links by correlation strength — filterCoAccessibleLinks","title":"Filter links by correlation strength — filterCoAccessibleLinks","text":"filterCoAccessibleLinks filter output   getCoAccessibleLinks threshold, retaining links   absolute correlation greater threshold.   function also adds chr, start, end site link   output table.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter links by correlation strength — filterCoAccessibleLinks","text":"","code":"filterCoAccessibleLinks(TileCorr, threshold = 0.5)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter links by correlation strength — filterCoAccessibleLinks","text":"TileCorr correlation table output getCoAccessibleLinks threshold Keep","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter links by correlation strength — filterCoAccessibleLinks","text":"FilteredTileCorr filtered correlation table chr,   start, end site link","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter links by correlation strength — filterCoAccessibleLinks","text":"","code":"if (FALSE) { # links is the output of MOCHA::getCoAccessibleLinks MOCHA::filterCoAccessibleLinks(links, threshold = 0.5) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":null,"dir":"Reference","previous_headings":"","what":"finalModelObject — finalModelObject","title":"finalModelObject — finalModelObject","text":"Trained MOCHA models - LOESS linear regression","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"finalModelObject — finalModelObject","text":"","code":"finalModelObject"},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"finalModelObject — finalModelObject","text":"list lists containing 2 items: \"Loess\" \"Linear\" \"Total\" \"Max\" \"Intercept\" Loess LOESS model Linear Linear model","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","title":"Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"getAltTSS Pulls peaks fall TSSs,   annotates name gene, identifies genes   evidence alternatively regulated TSSs, including type (  open TSSs gene significantly (less) accessible),   type ii (multiple TSSs significant different,   accessible others less). Alternatively, function  return   open TSSs differential measurements returnAllTSS flag set   TRUE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"","code":"getAltTSS(   completeDAPs,   returnAllTSS = FALSE,   nuancedTSS = TRUE,   nuancedTSSGap = 150,   threshold = 0.2,   TxDb,   OrgDb )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"completeDAPs GRanges object contains differential measurements across peaks (unfiltered DAPs). also work data.frame data.table version GRanges object. want alternatively regulated TSSs, object must include column names 'FDR', 'Log2FC_C', standard MOCHA differentials. returnAllTSS Flag return TSSs DAPs measurements, without filtering alternative TSS usage. multiple TSSs fall within tile, tile repeated TSS. nuancedTSS True/False flag determine alternative TSS genes filtered differential TSS usage falls within small range. Default TRUE nuancedTSSGap Minimum distance betweeen TSSs needed considered distinctly regulated TSSs. two TSSs close, unclear highly unlikely ATAC data can distinguish . Default 150 bp. threshold FDR Threshold determining significant vs non-significant changes accessibility. Following MOCHA's standards, default 0.2. TxDb TxDb-class transcript annotation package organism (e.g. \"TxDb.Hsapiens.UCSC.hg38.refGene\"). must installed. See  Bioconductor AnnotationData Packages. OrgDb OrgDb-class genome wide annotation package organism (e.g. \"org.Hs.eg.db\"). must installed. See  Bioconductor AnnotationData Packages","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"tpeaks GRanges containing annotated peaks falling TSS","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the SampleTileMatrix of the given cell population — getCellPopMatrix","title":"Get the SampleTileMatrix of the given cell population — getCellPopMatrix","text":"getCellPopMatrix pulls SampleTileMatrix tiles   called one given cell population.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the SampleTileMatrix of the given cell population — getCellPopMatrix","text":"","code":"getCellPopMatrix(   SampleTileObj,   cellPopulation,   dropSamples = TRUE,   NAtoZero = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the SampleTileMatrix of the given cell population — getCellPopMatrix","text":"SampleTileObj output getSampleTileMatrix, SummarizedExperiment pseudobulk intensities across tiles & cell types. cellPopulation cell population want pull . dropSamples Boolean flag determine whether drop samples small peak calling. NAtoZero Boolean flag determine whether replace NAs zero","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the SampleTileMatrix of the given cell population — getCellPopMatrix","text":"sampleTileMatrix matrix samples called tiles given cell   population.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find co-accessible neighboring regions — getCoAccessibleLinks","title":"Find co-accessible neighboring regions — getCoAccessibleLinks","text":"getCoAccessibleLinks takes input set regions (tiles) finds co-accessible neighboring regions within window. Co-accessibility defined correlation two region intensity (openness) across samples.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find co-accessible neighboring regions — getCoAccessibleLinks","text":"","code":"getCoAccessibleLinks(   SampleTileObj,   cellPopulation = \"All\",   regions,   chrChunks = 1,   windowSize = 1 * 10^6,   numCores = 1,   ZI = TRUE,   approximateTile = FALSE,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find co-accessible neighboring regions — getCoAccessibleLinks","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices cellPopulation string denoting cell population interest, must present SampleTileObj regions GRanges object vector strings containing regions compute co-accessible links. Strings must format \"chr:start-end\", e.g. \"chr4:1300-2222\". Can output getDifferentialAccessibleTiles. chrChunks functions subsets groups chromosome, parallelizes within group chromosomes running correlations. method keeps memory low. speed things high performing platforms, can chunk one chromosome time. Default chrChunks = 1, one chromosome time. windowSize size window, basepairs, around input region search co-accessible links numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. approximateTile set TRUE, use tiles overlap regions given, instead finding exact match regions variable. Default FALSE. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find co-accessible neighboring regions — getCoAccessibleLinks","text":"TileCorr data.table correlation matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find co-accessible neighboring regions — getCoAccessibleLinks","text":"technical details zero-inflated correlation can          found : Pimentel, Ronald Silva, \"Kendall's Tau Spearman's Rho               Zero-Inflated Data\" (2009). Dissertations. implementation (scHOT R package), can found :               http://www.bioconductor.org/packages/release/bioc/html/scHOT.html","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample-specific coverage files for each sample-cell population. — getCoverage","title":"Get sample-specific coverage files for each sample-cell population. — getCoverage","text":"getCoverage takes output MOCHA::getPopFrags returns  GRanges singe-basepair resolution coverage.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample-specific coverage files for each sample-cell population. — getCoverage","text":"","code":"getCoverage(   popFrags,   normFactor,   TxDb,   cl,   filterEmpty = FALSE,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample-specific coverage files for each sample-cell population. — getCoverage","text":"popFrags GRangesList fragments sample/cell populations normFactor Normalization factor. Can either one, case coverage files normalized value, length GRangesList TxDb TxDb-class transcript annotation package organism (e.g. \"TxDb.Hsapiens.UCSC.hg38.refGene\"). must installed. See  Bioconductor AnnotationData Packages. cl cl argument pblapply filterEmpty True/False flag whether carry forward regions without coverage. verbose Boolean variable determine verbosity output.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample-specific coverage files for each sample-cell population. — getCoverage","text":"popCounts GRangesList coverage sample cell population","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","title":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","text":"getDifferentialAccessibleTiles allows   determine whether regions chromatin differentially accessible   groups conducting test","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","text":"","code":"getDifferentialAccessibleTiles(   SampleTileObj,   cellPopulation,   groupColumn,   foreground,   background,   signalThreshold = 12,   minZeroDiff = 0.5,   fdrToDisplay = 0.2,   outputGRanges = TRUE,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix cellPopulation string denoting cell population interest groupColumn column containing sample group labels foreground foreground group samples differential comparison background background group samples differential comparison signalThreshold Minimum median intensity required keep tiles differential testing increase statistical power small sample cohorts. Default 12. minZeroDiff Minimum difference average dropout rates across groups require keep tiles differential testing. Default 0.5 (50%). fdrToDisplay False-discovery rate used standard output messaging. Default 0.2. outputGRanges Outputs GRanges TRUE data.frame FALSE. Default TRUE. numCores number cores use multiprocessing. Default 1. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","text":"full_results differential accessibility results GRanges   matrix data.frame depending flag `outputGRanges`.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct a differential test between open regions of two sample groups — getDifferentialAccessibleTiles","text":"","code":"if (FALSE) { cellPopulation <- \"MAIT\" foreground <- \"Positive\" background <- \"Negative\" # Standard output will display the number of tiles found below a false-discovery rate threshold. # This parameter does not filter results and only affects the aforementioned message. fdrToDisplay <- 0.2 # Choose to output a GRanges or data.frame. # Default is TRUE outputGRanges <- TRUE # SampleTileMatrices is the output of MOCHA::getSampleTileMatrix differentials <- MOCHA::getDifferentialAccessibleTiles(   SampleTileObj = SampleTileMatrices,   cellPopulation = cellPopulation,   groupColumn = groupColumn,   foreground = foreground,   background = background,   fdrToDisplay = fdrToDisplay,   outputGRanges = outputGRanges,   numCores = numCores ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getModelValues.html","id":null,"dir":"Reference","previous_headings":"","what":"getModelValues from runZIGLMM output. — getModelValues","title":"getModelValues from runZIGLMM output. — getModelValues","text":"getModelValues Pull data.frame model values (slope, significance, std.error) given factor SummarizedExperiment output runZIGLMM.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getModelValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getModelValues from runZIGLMM output. — getModelValues","text":"","code":"getModelValues(object, specificVariable)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getModelValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getModelValues from runZIGLMM output. — getModelValues","text":"object SummarizedExperiment object generated runZIGLMM. specificVariable string, describing factor influence.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getModelValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getModelValues from runZIGLMM output. — getModelValues","text":"data.frame slopes, significance, standard error one factor.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getModelValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getModelValues from runZIGLMM output. — getModelValues","text":"","code":"if (FALSE) { age_df <- getModelValues(runZIGLMM_output, \"Age\") }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fragments by populations from an ArchR Project — getPopFrags","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"getPopFrags returns list sample-specific fragments per cell population GRangesList.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"","code":"getPopFrags(   ArchRProj,   cellPopLabel,   cellSubsets = \"ALL\",   poolSamples = FALSE,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"ArchRProj ArchR Project. cellPopLabel name metadata column ArchR Project contains populations cells want extract fragments . cellSubsets Default ''. want export populations, give list group names. needs unique - duplicated names. list group names must identical names appear given cellPopLabel metadata column ArchR Project. poolSamples Set TRUE pool sample-specific fragments cell population. default FALSE sample-specific fragments returned. numCores Number cores use. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"list GRanges containing fragments. GRanges corresponds   population defined cellSubsets sample.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","title":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","text":"getSampleTileMatrix takes output peak calling   callOpenTiles creates sample-tile matrices containing signal   intensity tile.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","text":"","code":"getSampleTileMatrix(   tileResults,   cellPopulations = \"ALL\",   groupColumn = NULL,   threshold = 0.2,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","text":"tileResults MultiAssayExperiment returned callOpenTiles containing containing peak calling results. cellPopulations vector strings. Cell subsets TileResults generate sample-tile matrices. list group names must identical names appear ArchRProject metadata.  cellPopulations='', peak calling done cell populations ArchR project metadata. Default ''. groupColumn Optional, column containing sample group labels determining consensus tiles within sample groups. Default NULL, samples used determining consensus tiles. threshold Threshold consensus tiles, minimum % samples (within sample group, groupColumn set) peak must called retained. set 0, retain union samples' peaks (equivalent threshold 1/numSamples). recommended tune parameter omit potentially spurious peaks. numCores Optional, number cores use multiprocessing. Default 1. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","text":"SampleTileMatrices MultiAssayExperiment containing sample-tile   intensity matrix cell population","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get consensus sample-tile matrices containing the signal intensity at each tile — getSampleTileMatrix","text":"","code":"# \\donttest{ # Starting from GRangesList if (   require(BSgenome.Hsapiens.UCSC.hg19) &&     require(TxDb.Hsapiens.UCSC.hg38.refGene) &&     require(org.Hs.eg.db) ) {   tiles <- MOCHA::callOpenTiles(     ATACFragments = MOCHA::exampleFragments,     cellColData = MOCHA::exampleCellColData,     blackList = MOCHA::exampleBlackList,     genome = \"BSgenome.Hsapiens.UCSC.hg19\",     TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",     Org = \"org.Hs.eg.db\",     outDir = tempdir(),     cellPopLabel = \"Clusters\",     cellPopulations = c(\"C2\", \"C5\"),     numCores = 1   )    SampleTileMatrices <- MOCHA::getSampleTileMatrix(     tiles,     cellPopulations = c(\"C2\", \"C5\"),     threshold = 0 # Take union of all samples' open tiles   ) } # }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotLMEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a pilot run of single linear model on a subset of data — pilotLMEM","title":"Execute a pilot run of single linear model on a subset of data — pilotLMEM","text":"pilotLMEM Runs linear mixed-effects modeling   continuous, non-zero inflated data using lmer","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotLMEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a pilot run of single linear model on a subset of data — pilotLMEM","text":"","code":"pilotLMEM(   ExperimentObj,   cellPopulation = NULL,   modelFormula = NULL,   pilotIndices = 1:10,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotLMEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a pilot run of single linear model on a subset of data — pilotLMEM","text":"ExperimentObj SummarizedExperiment object generated getSampleTileMatrix, chromVAR, . cellPopulation single cell population run pilot model modelFormula formula use lmerTest::lmer, format (exp ~ factors). factors must found column names ExperimentObj metadata. pilotIndices vector integers defining subset ExperimentObj matrix. Default 1:10. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotLMEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a pilot run of single linear model on a subset of data — pilotLMEM","text":"modelList list outputs lmerTest::lmer","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotZIGLMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a pilot run of model on a subset of data — pilotZIGLMM","title":"Execute a pilot run of model on a subset of data — pilotZIGLMM","text":"pilotLMEM Runs linear mixed-effects modeling zero   inflated data using glmmTMB. TryCatch catch   errors, return error dataframe troubleshooting.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotZIGLMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a pilot run of model on a subset of data — pilotZIGLMM","text":"","code":"pilotZIGLMM(   TSAM_Object,   cellPopulation = NULL,   continuousFormula = NULL,   ziformula = NULL,   zi_threshold = 0,   verbose = FALSE,   pilotIndices = 1:10 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotZIGLMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a pilot run of model on a subset of data — pilotZIGLMM","text":"TSAM_Object SummarizedExperiment object generated getSampleTileMatrix, chromVAR, . cellPopulation single cell population run pilot model continuousFormula formula, see glmmTMB. Combined fixed random effects formula, following lme4 syntax. ziformula zero-inflated formula, see glmmTMB. one-sided (.e., response variable) formula zero-inflation combining fixed random effects: default ~0 specifies zero-inflation. Specifying ~. sets zero-inflation formula identical right-hand side formula (.e., conditional effects formula); terms can also added subtracted. using ~. zero-inflation formula models conditional effects formula contains offset term, offset term automatically dropped. zero-inflation model uses logit link. zi_threshold Zero-inflated threshold (range = 0-1), representing fraction samples zeros. percentage zeros tile 0 zi_threshold, samples zeroes dropped continous formula used. Use parameter risk. Default 0. verbose Set TRUE display additional messages. Default FALSE. pilotIndices vector integers defining subset ExperimentObj matrix. Default 1:10.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/pilotZIGLMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a pilot run of model on a subset of data — pilotZIGLMM","text":"modelList list outputs glmmTMB::glmmTMB","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot to determine the reproducibility threshold — plotConsensus","title":"Plot to determine the reproducibility threshold — plotConsensus","text":"plotConsensus Extracts peak reproducibility generates \t\t\t\t\theuristic plots can used determine reproducibility threshold \t\t\t\t\tused within getSampleTileMatrix.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot to determine the reproducibility threshold — plotConsensus","text":"","code":"plotConsensus(   tileObject,   cellPopulations = \"All\",   groupColumn = NULL,   returnPlotList = FALSE,   returnDFs = FALSE,   numCores = 1 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot to determine the reproducibility threshold — plotConsensus","text":"tileObject MultiAssayExperiment object callOpenTiles, cellPopulations cell populations want visualize. groupColumn Optional parameter, getSampleTileMatrix, defines whether want plot reproducibility within returnPlotList Instead one plot celltypes/conditions, returns list plots cell types returnDFs Instead plot, returns data.frame reproducibility across samples. set false, plots data.frame instead returning . numCores Number cores multithread .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot to determine the reproducibility threshold — plotConsensus","text":"SampleTileObj input data structure added gene annotations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a given region summarized across all cell groupings — plotRegion","title":"Plot a given region summarized across all cell groupings — plotRegion","text":"plotRegion Plots region summarized across   cell groupings (groups=initial getPopFrags() split) optional motif   overlay, chromosome position ideogram, additional GRanges tracks.   plotting motif overlay, ensure motif annotations added   counts SummarizedExperiment. basic plot can rendered just   counts SummarizedExperiment, additional formatting arguments allow   customization. Note show specific genes option   'whichGene' RMariaDB package must installed.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a given region summarized across all cell groupings — plotRegion","text":"","code":"plotRegion(   countSE,   plotType = \"area\",   base_size = 12,   counts_color = NULL,   range_label_size = 2,   legend.position = NULL,   facet_label_side = \"top\",   counts_color_var = \"Groups\",   counts_group_colors = NULL,   counts_theme_ls = NULL,   motifSetName = NULL,   motif_y_space_factor = 4,   motif_stagger_labels_y = FALSE,   motif_weights = NULL,   motif_weight_name = \"Motif Weight\",   motif_weight_colors = c(darkblue = -10, gray = 0, darkred = 10),   motif_lab_size = 1,   motif_lab_alpha = 0.25,   motif_line_alpha = 0.25,   motif_line_size = 0.75,   showGene = TRUE,   whichGene = NULL,   db_id_col = \"REFSEQ\",   collapseGenes = \"None\",   gene_theme_ls = NULL,   additionalGRangesTrack = NULL,   linkdf = NULL,   showIdeogram = TRUE,   ideogram_genome = \"hg19\",   relativeHeights = c(Chr = 0.9, `Normalized Counts` = 7, Links = 1.5, Genes = 2,     AdditionalGRanges = 4.5),   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a given region summarized across all cell groupings — plotRegion","text":"countSE SummarizedExperiment MOCHA::getCoverage plotType Options include 'overlaid','area', 'line', 'RidgePlot'. default 'area', plot separate track group area filled curve. Setting plotType 'overlaid' overlay count plot histograms across samples, instead faceting separately. Setting plotType 'RidgePlot' generate RidgePlot across groups. base_size Numeric, default 12. Global plot base text size parameter counts_color Optional color palette. named vector color values names unique values `color_var` column range_label_size Numeric value, default 4. Text size y-axis range label legend.position acceptable `legend.position` argument theme(). Default NULL place legend overlaid plots (0.8,0.8), \"right\" faceted plots. facet_label_side Direction character value, default \"top\". Can also \"right\", \"left\", \"bottom\". Position facet label. counts_color_var Character value, default \"Groups\". Column name countdf use color counts plots. used counts_group_colors provided counts_group_colors Optional named color vector. Values colors, names levels `counts_color_var`. provided, color plots specifically using `scale_color_manual()` counts_theme_ls list named theme arguments passed theme(). example, `list(axis.ticks = element_blank())`. Default NULL use `.counts_plot_default_theme`. motifSetName name motif set ArchRProj use annotation. Example: 'JasparMotifs' motif_y_space_factor factor vertical spacing motif labels. Default 4. Increase make labels farther apart, decrease make labels closer. motif_stagger_labels_y = FALSE Logical value, default FALSE. TRUE,  stagger motif labels adjacent columns vertical direction motif_weights Optional numeric vector, default NULL. provided used color motif labels weighted values motif_weight_name Character value, default \"Motif Weight\". Used label legend motif colors motif_weight_colors Named numeric vector. Names color values breaks corresponding values motif_weights. Values outside highest lowest value appear max min defined color value. motif_lab_size Numeric value, default 1. Size motif labels. motif_lab_alpha Numeric value, default 0.25. Alpha motif labels. motif_line_alpha Numeric value, default 0.25. Alpha motif lines. motif_line_size Numeric value, default 1. Size motif lines. showGene Logical value, default TRUE. Whether gene track plotted. whichGene Name gene plotting specific gene region. db_id_col Character value. Column `OrgDb` containing output id `whichGene` plotting. Default \"REFSEQ\". collapseGenes Options include 'collapseAll', 'longestTx', 'None' Default 'None' plot expanded view reference genes, 'collapseAll' want collapse gene tracks one, 'longestTx' plot longest transcript gene. gene_theme_ls Named list parameters passed `theme()` gene plot. Default NULL use `.gene_plot_theme` additionalGRangesTrack GRanges object containing additional track plot data linkdf dataframe co-accessible links display additional track showIdeogram Logical value, default TRUE. TRUE plots chromosome ideogram top multi-track plot ideogram_genome Character value, genome name ideogram plot. Default 'hg19'. relativeHeights Named numeric vector relative heights 4 track plots enable clean visualization many tracks. Unused tracks ignored. Default value = c(`Chr` = 0.9, `Normalized Counts` = 7, `Genes`= 2, `AdditionalGRanges` = 4.5) verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a given region summarized across all cell groupings — plotRegion","text":"input ggplot object motif labels overlaid","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a given region summarized across all cell groupings — plotRegion","text":"","code":"if (FALSE) { # my_count_SE is a counts data frame generated by extractRegion()  # Simple counts + ideogram + all genes: plotRegion(countSE = my_count_SE)  # Motif overlay for a project my_proj containing \"JasparMotifs\" annotations: plotRegion(   countSE = my_count_SE, motifSetName = \"JasparMotifs\",   motif_lab_alpha = 1, motif_line_alpha = 1 )  # Motif overlay w/ weights: plotRegion(   countSE = my_count_SE, motifSetName = \"JasparMotifs\", motif_lab_alpha = 1,   motif_line_alpha = 1, motif_weights = my_enrichment_weights ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/runLMEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","title":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","text":"runLMEM Runs linear mixed-effects modeling   continuous, non-zero inflated data using lmer","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runLMEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","text":"","code":"runLMEM(   ExperimentObj,   modelFormula = NULL,   initialSampling = 5,   verbose = FALSE,   numCores = 1 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/runLMEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","text":"ExperimentObj SummarizedExperiment object generated getSampleTileMatrix, chromVAR, . expected contain one assay, first assay used model. Data zero-inflated. modelFormula formula use lmerTest::lmer, format (exp ~ factors). factors must found column names ExperimentObj metadata. modelFormula must start 'exp' response. See lmer. initialSampling Size data use pilot verbose Set TRUE display additional messages. Default FALSE. numCores integer. Number cores parallelize across.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runLMEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","text":"results SummarizedExperiment containing LMEM results","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runLMEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Linear Mixed-Effects Modeling for continuous,\n non-zero inflated data — runLMEM","text":"","code":"if (FALSE) { modelList <- runLMEM(ExperimentObj,   modelFormula = NULL,   initialSampling = 5,   verbose = FALSE,   numCores = 1 ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/runZIGLMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","title":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","text":"runZIGLMM Runs linear mixed-effects modeling   zero-inflated data using glmmTMB.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runZIGLMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","text":"","code":"runZIGLMM(   TSAM_Object,   cellPopulation = \"all\",   continuousFormula = NULL,   ziformula = NULL,   zi_threshold = 0,   initialSampling = 5,   verbose = FALSE,   numCores = 1 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/runZIGLMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","text":"TSAM_Object SummarizedExperiment object generated getSampleTileMatrix. cellPopulation Name cell type(s), ''. function combine cell types mentioned one matrix running model. continuousFormula formula continuous data used within glmmTMB. format (exp ~ factors). factors must found column names TSAM_Object metadata, except CellType, FragNumber CellCount, extracted TSAM_Object. modelFormula must start 'exp' response. See glmmTMB. ziformula formula zero-inflated data used within glmmTMB. format ( ~ factors). factors must found column names TSAM_Object colData metadata, except CellType, FragNumber CellCount, extracted TSAM_Object. zi_threshold Zero-inflated threshold ( range = 0-1), representing fraction samples zeros. percentage zeros tile 0 zi_threshold, samples zeroes dropped continous formula used. Use parameter risk. Default 0. initialSampling Size data use pilot verbose Set TRUE display additional messages. Default FALSE. numCores integer. Number cores parallelize across.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runZIGLMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","text":"results SummarizedExperiment containing LMEM results","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/runZIGLMM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Zero-inflated Generalized Linear Mixed Modeling on pseudobulked\n  scATAC data — runZIGLMM","text":"","code":"if (FALSE) { modelList <- runZIGLMM(STM[c(1:1000), ],   cellPopulation = \"CD16 Mono\",   continuousFormula = exp ~ Age + Sex + days_since_symptoms + (1 | PTID),   ziformula = ~ FragNumber + Age,   verbose = TRUE,   numCores = 35 ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedConsensusTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"simplifiedConsensusTiles — simplifiedConsensusTiles","title":"simplifiedConsensusTiles — simplifiedConsensusTiles","text":"simplifiedConsensusTiles R helper function, part   single-cell peak","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedConsensusTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simplifiedConsensusTiles — simplifiedConsensusTiles","text":"","code":"simplifiedConsensusTiles(ref)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedConsensusTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simplifiedConsensusTiles — simplifiedConsensusTiles","text":"ref ref list data one specific cell type, sampleData, threshold, groupColumn, verbose flag.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":null,"dir":"Reference","previous_headings":"","what":"singlePopulationSampleTileMatrix — simplifiedSampleTile","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"singlePopulationSampleTileMatrix function can transform   set tile intensities peak X sample matrix custom set tiles","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"","code":"simplifiedSampleTile(ref)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"x ref list data one specific cell type (RaggedExperiment) tiles called across given population.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"sampleTileIntensityMat sample X peak matrix containing observed   measurements sample peak.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"technical details algorithm found singlePopulationSampleTileMatrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/simplifiedSampleTile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"singlePopulationSampleTileMatrix — simplifiedSampleTile","text":"XX","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationConsensusTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","title":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","text":"singlePopulationConsensusTiles R helper function, part   single-cell peak","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationConsensusTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","text":"","code":"singlePopulationConsensusTiles(   peaksExperiment,   sampleData,   threshold,   groupColumn = NULL,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"singlePopulationSampleTileMatrix function can transform   set tile intensities peak X sample matrix custom set tiles","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"","code":"singlePopulationSampleTileMatrix(   peaksExperiment,   consensusTiles,   NAtoZero = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"peaksExperiment peakset RaggedExperiment, one celltype output callOpenTiles consensusTiles vector containing tileIDs subset sample-tile matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"sampleTileIntensityMat sample X peak matrix containing observed   measurements sample peak.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"technical details algorithm found XX.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"XX","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsets a tileResults-type object by metadata — subsetMOCHAObject","title":"Subsets a tileResults-type object by metadata — subsetMOCHAObject","text":"subsetObject subsets tileResults-type object (  callOpenTiles), SummarizedExperiment-type object (  getSampleTileMatrix), either cell type sample metadata.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsets a tileResults-type object by metadata — subsetMOCHAObject","text":"","code":"subsetMOCHAObject(   Object,   subsetBy,   groupList,   removeNA = TRUE,   subsetPeaks = TRUE,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsets a tileResults-type object by metadata — subsetMOCHAObject","text":"Object MultiAssayExperiment RangedSummarizedExperiment, subsetBy variable subset . Can either 'celltype', column sample metadata (see `colData(Object)`). groupList list cell type names sample-associated data used subset Object removeNA TRUE, removes groups groupList NA. FALSE, keep groups NA. subsetPeaks `subsetBy` = 'celltype', subset tile set tiles called cell types. Default TRUE. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsets a tileResults-type object by metadata — subsetMOCHAObject","text":"Object input Object, filtered either cell type   samples desired.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests input tile pairs against a ChromVAR background — testCoAccessibilityChromVar","title":"Tests input tile pairs against a ChromVAR background — testCoAccessibilityChromVar","text":"testCoAccessibilityChromVar takes input set tile   pairs tests whether significantly different compared   background set found via ChromVAR","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests input tile pairs against a ChromVAR background — testCoAccessibilityChromVar","text":"","code":"testCoAccessibilityChromVar(   SampleTileObj,   tile1,   tile2,   numCores = 1,   ZI = TRUE,   backNumber = 1000,   returnBackGround = FALSE,   highMem = FALSE,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests input tile pairs against a ChromVAR background — testCoAccessibilityChromVar","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices tile1 vector indices tile names (chrX:100-2000) tile pairs test (first tile pair) tile2 vector indices tile names (chrX:100-2000) tile pairs test (second tile pair) numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. backNumber number ChromVAR-matched background pairs. Default 1000. returnBackGround Boolean, TRUE return background correlations well foreground. Default FALSE. highMem Boolean control memory usage. Default FALSE. set highMem TRUE plenty memory want run function faster.s verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests input tile pairs against a ChromVAR background — testCoAccessibilityChromVar","text":"foreGround data.frame Tile1, Tile2, Correlation, p-value   correlation compared background","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests input tile pairs against a random background — testCoAccessibilityRandom","title":"Tests input tile pairs against a random background — testCoAccessibilityRandom","text":"testCoAccessibilityRandom takes input set tile   pairs tests whether significantly different compared   random, non-overlapping background set.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests input tile pairs against a random background — testCoAccessibilityRandom","text":"","code":"testCoAccessibilityRandom(   SampleTileObj,   tile1,   tile2,   numCores = 1,   ZI = TRUE,   backNumber = 1000,   calcPValue = TRUE,   returnBackGround = FALSE,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests input tile pairs against a random background — testCoAccessibilityRandom","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices tile1 vector indices tile names (chrX:100-2000) tile pairs test (first tile pair) tile2 vector indices tile names (chrX:100-2000) tile pairs test (second tile pair) numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. backNumber number background pairs. Default 1000. calcPValue Boolean, TRUE calculate p-values. Default TRUE. returnBackGround Boolean, TRUE return background correlations well foreground. Default FALSE. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests input tile pairs against a random background — testCoAccessibilityRandom","text":"foreGround data.frame Tile1, Tile2, Correlation, p-value   correlation compared background","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"youden_threshold — youden_threshold","title":"youden_threshold — youden_threshold","text":"Trained regression model predicting cutoff threshold peak calling. Call: loess(formula = OptimalCutpoint ~ Ncells, data = thresh_df)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"youden_threshold — youden_threshold","text":"","code":"youden_threshold"},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"youden_threshold — youden_threshold","text":"list 18 regression variables","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"youden_threshold — youden_threshold","text":"Number Observations: 27 Equivalent Number Parameters: 5.98 Residual Standard Error: 0.02121","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-100","dir":"Changelog","previous_headings":"","what":"MOCHA 1.0.0","title":"MOCHA 1.0.0","text":"CRAN release: 2023-06-12 Adopting semantic versioning starting version, versioning reflects breaking changes compared previous CRAN release. Includes test improvements New functions bulkDimReduction, bulkUMAP, MotifEnrichment, MotifSetEnrichmentAnalysis, pilotLMEM, runLMEM, pilotZIGLMM, runZIGLMM, combineSampleTileMatrix, getCoverage Improvements metadata carried output objects","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-025","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.5","title":"MOCHA 0.2.5","text":"patches bug (rounding error) found getDifferentialAccessibleTiles (#125), reverts using mclapply parallelization forgetDifferentialAccessibleTiles. adds conditional tests (snapshot tests) COVID dataset ensure reproducibility results MOCHA manuscript updates COVID vignette differentials reflect latest usage.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-024","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.4","title":"MOCHA 0.2.4","text":"Fixes bug callOpenTiles “Clusters” hardcoded step computing fragment counts table. Parallelization overhaul address memory leaks using parLapply. ParLapply now passed helper function directly single object input function, input object list containing variables needed helper function.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-023","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.3","title":"MOCHA 0.2.3","text":"MOCHA MultiAssayExperiment MOCHA SummarizedExperiment objects now contain new metadata CallOpenTiles now accepts database package names (strings) Genome, OrgDb, TxDb, -memory R objects database packages Downstream functions Genome, OrgDb, TxDb previously inputs now check input MOCHA object’s metadata load relevant databases.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-022","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.2","title":"MOCHA 0.2.2","text":"getCoAccessibleLinks testCoAccessibilityChromVar testCoAccessibilityRandom combineSampleTileMatrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-021","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.1","title":"MOCHA 0.2.1","text":"release adds additional test coverage new test data, covering edge cases callOpenTiles. Removes option log2Intensity getSampleTileMatrix (done default getDifferentialAccessibleTiles)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-020","dir":"Changelog","previous_headings":"","what":"MOCHA 0.2.0","title":"MOCHA 0.2.0","text":"includes initial release package CRAN, adds updated requirements R >= 4.1.0 plyranges >1.14.0","code":""},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-010","dir":"Changelog","previous_headings":"","what":"MOCHA 0.1.0","title":"MOCHA 0.1.0","text":"CRAN release: 2022-12-06 Added NEWS.md file track changes package. MOCHA submitted CRAN initial release.","code":""}]
