[{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://aifimmunology.github.io/MOCHA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"load-libraries-archr-project-and-annotation-databases","dir":"Articles","previous_headings":"","what":"0. Load libraries, ArchR project, and annotation databases","title":"COVID-walkthrough","text":"Optionally filter ArchR project subset samples.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"# You should substitute this with your own ArchR project. # You must have completed cell labeling with your ArchR project.  myArchRProj <- ArchR::loadArchRProject(\"/home/jupyter/FullCovid\")  # Define your annotation package for TxDb object(s) # and genome-wide annotation. # Here our samples are human using hg38 as a reference. # For more info: <https://bioconductor.org/packages/3.15/data/annotation/>  library(TxDb.Hsapiens.UCSC.hg38.refGene)  library(org.Hs.eg.db)  TxDb <- TxDb.Hsapiens.UCSC.hg38.refGene  Org <- org.Hs.eg.db  # Optional: Filter your ArchR project by sample. # For our example we filter ArchR Project to three samples from # each COVID Status (3 Positive, 3 Negative).  samplesToKeep <- c( \"B011-AP0C1W3\", \"B011-AP0C1W8\", \"B011-AP0C2W1\", \"B025_FSQAAZ0BZZS-01\", \"B025_FSQAAZ0C0YJ-01\", \"B025_FSQAAZ0C00P-07\" ) idxSample <- BiocGenerics::which(myArchRProj$Sample %in% samplesToKeep)  cellsSample <- myArchRProj$cellNames[idxSample] myArchRProj <- myArchRProj[cellsSample, ]"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"setting-parameters","dir":"Articles","previous_headings":"","what":"1. Setting Parameters","title":"COVID-walkthrough","text":"set according ArchR project investigative question. details parameters, view help pages function using ?callOpenTiles ?getSampleTileMatrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"# Parameters for calling open tiles. cellPopLabel <- \"CellSubsets\"  cellPopulations <- c(\"MAIT\", \"CD16 Mono\", \"DC\")  numCores <- 20"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"call-open-tiles","dir":"Articles","previous_headings":"","what":"2. Call open tiles","title":"COVID-walkthrough","text":"Get sample-tile matrices specified cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"tileResults <- MOCHA::callOpenTiles(   myArchRProj,    cellPopLabel = cellPopLabel,    cellPopulations = cellPopulations,    TxDb = TxDb,    Org = Org,    numCores = numCores )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-consensus-sample-tile-matrices","dir":"Articles","previous_headings":"","what":"3. Get consensus sample-tile matrices","title":"COVID-walkthrough","text":"…cell populations. matrices organized cell population RangedSummarizedExperiment object primary input downstream analyses. advantage MOCHA’s ability call sample-specific open tiles can determine high-quality set ”consensus tiles determined follows: sample “votes” whether tile open sample, keep tiles called open minimum percentage samples. minimum percentage samples tile must called retained controlled threshold. groupColumn can provided specify metadata column separates data sample groups, e.g. case control groups. Consensus tiles computed group, union consensus tiles group retained. used expected biological differences sample groups. Currently best utilized group similar size, threshold applied evenly group. default, groupColumn null samples pooled vote consensus tiles.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"# We have 6 samples total: 3 samples for each COVID status (3 positive and 3 negative). # Since these groupings may have unique biology and we expect differences # in accessibility, we want to compute consensus tiles on each  # group independently and take the union of consensus tiles from each group. groupColumn <- \"COVID_status\"   # We set the threshold to require a tile must be open in at least 2 samples # in its group to be retained (2/3=0.66) threshold <- 0.66  # Alternatively, you can set the threshold to 0 to keep the union of # all samples' open tiles. # This is equivalent to setting a threshold that would retain # tiles that are open in at least one sample.   SampleTileMatrices <- MOCHA::getSampleTileMatrix(   tileResults,    cellPopulations = cellPopulations[1],    groupColumn = groupColumn,    threshold = threshold,    log2Intensity = TRUE )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"optional-add-gene-annotations","dir":"Articles","previous_headings":"","what":"4. (Optional) Add gene annotations","title":"COVID-walkthrough","text":"…motifs SampleTileMatrices. info aid downstream analyses required differential accessibility coaccessibility.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"# This function can also take any GRanges object # and add annotations to its metadata. SampleTileMatricesAnnotated <- MOCHA::annotateTiles(SampleTileMatrices)  # Load a curated motif set from library(chromVARmotifs) # included with ArchR installation data(human_pwms_v2) SampleTileMatricesAnnotated <- MOCHA::addMotifSet(   SampleTileMatricesAnnotated,    pwms = human_pwms_v2,    w = 7 # weight parameter for motifmatchr )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"optional-plot-a-specific-regions-coverage","dir":"Articles","previous_headings":"","what":"5. (Optional) Plot a specific region’s coverage","title":"COVID-walkthrough","text":"plot coverage specific region gene infection stage.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"countSE <- MOCHA::extractRegion(   SampleTileObj = SampleTileMatrices,    cellPopulations = \"CD16 Mono\",    region = \"chr3:38137866-38139912\",    groupColumn = \"COVID_status\",    numCores = numCores,    sampleSpecific = FALSE ) dev.off() pdf(\"ExamplePlot.pdf\") # Note that to show specific genes with the option' whichGene' # you must have the package RMariaDB installed  MOCHA::plotRegion(countSE = countSE, whichGene = \"MYD88\") dev.off()"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-differential-accessibility-for-specific-cell-populations","dir":"Articles","previous_headings":"","what":"6. Get differential accessibility for specific cell populations","title":"COVID-walkthrough","text":"comparing MAIT cells samples groupColumn “COVID_status” Positive (foreground) Negative samples (background).","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"cellPopulation <- \"MAIT\" foreground <- \"Positive\" background <- \"Negative\"   # Standard output will display the number of tiles found below a false-discovery rate threshold. # This parameter does not filter results and only affects the afforementioned message.  fdrToDisplay <- 0.2  # Choose to output a GRanges or data.frame. # Default is TRUE outputGRanges <- TRUE  differentials <- MOCHA::getDifferentialAccessibleTiles(   SampleTileObj = SampleTileMatrices,    cellPopulation = cellPopulation,    groupColumn = groupColumn,    foreground = foreground,    background = background,    fdrToDisplay = fdrToDisplay,    outputGRanges = outputGRanges,    numCores = numCores )"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":"get-co-accessible-links","dir":"Articles","previous_headings":"","what":"7. Get co-accessible links","title":"COVID-walkthrough","text":"…input regions (tiles) neighboring regions within window. give first ten differential tiles input regions.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/COVID-walkthrough.html","id":null,"dir":"Articles","previous_headings":"","what":"COVID-walkthrough","title":"COVID-walkthrough","text":"","code":"regions <- head(differentials, 10)  # Alternatively, define regions as a character vector # of region strings in the format \"chr:start-end\" # regions <- c( # \"chrY:7326500-7326999\", # \"chrY:7327000-7327499\", # \"chrY:7339500-7339999\", # \"chrY:7344500-7344999\" # )  links <- MOCHA::getCoAccessibleLinks(   SampleTileObj = SampleTileMatrices,   cellPopulation = cellPopulation,   regions = regions,   windowSize = 1 * 10^6,   numCores = numCores,   verbose = TRUE )  # Optionally filter these links by their absolute # correlation - this output also adds the chromosome, # start, and end site of each link to the table.  MOCHA::filterCoAccessibleLinks(links, threshold = 0.7)"},{"path":[]},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Comparing-Cell-Populations.html","id":null,"dir":"Articles","previous_headings":"","what":"Comparing-Cell-Populations","title":"Comparing-Cell-Populations","text":"","code":"getCellTypeMarkers <- function(STObj, outputGRanges = TRUE, numCores = 25) {    # Extract all the Sample-Tile Matrices for each cell type   temp <- SummarizedExperiment::assays(STObj)    cl <- parallel::makeCluster(numCores)   # Let's generate a new assay, that will contain the   # the intensity for a given cell, as well as the   # median intensity per sample-tile for all other cell types (i.e. the background)    newAssays <- lapply(1:length(temp), function(x) {      # Generate the list of intensities for all other cell types     temp2 <- temp[-x]     # Transform it into an array     bckGround <- array(unlist(temp2), c(dim(temp2[[1]]), length(temp2)))     bckGround[is.na(bckGround)] <- 0     # Find the median background intensity per sample-tile across all cell types     tmp <- parallel::parApply(cl, bckGround, 1:2, function(y) median(y))     # Rename the columns with 'Bckgrnd' so that we identify the background samples     colnames(tmp) <- paste(colnames(temp[[x]]), \"Bckgrnd\", sep = \"_\")     # Merge it with the cell type intensities, so that the background samples     # are in the same     cbind(temp[[x]], tmp)   })   parallel::stopCluster(cl)    names(newAssays) <- names(temp)    newAssays <- lapply(newAssays, as.matrix)    colData_tmp <- colData(STObj)   rownames(colData_tmp) <- paste(rownames(colData_tmp), \"Bckgrnd\", sep = \"_\")   newColData <- rbind(colData(STObj), colData_tmp)   newColData$CellType <- c(     rep(\"Foreground\", nrow(colData_tmp)),     rep(\"Background\", nrow(colData_tmp))   )   newColData$Sample <- rownames(newColData)    allRanges <- SummarizedExperiment::rowRanges(STObj)   for (i in names(temp)) {     mcols(allRanges)[, i] <- rep(TRUE, length(allRanges))   }    newObj <- SummarizedExperiment(     assays = newAssays,     colData = newColData,     rowRanges = allRanges,     metadata = STObj@metadata   )    allDifs <- lapply(names(temp), function(x) {     getDifferentialAccessibleTiles(newObj,       cellPopulation = x,       groupColumn = \"CellType\",       foreground = \"Foreground\",       background = \"Background\",       fdrToDisplay = 0.2,       outputGRanges = outputGRanges,       numCores = numCores     )   })    names(allDifs) <- names(temp)    return(allDifs) }  compareCellTypes <- function(STObj, CellType_1, CellType_2, outputGRanges = TRUE, numCores = 25) {    # Extract all the Sample-Tile Matrices for each cell type   temp <- SummarizedExperiment::assays(STObj)    # Confirm that CellType_1 and CellType_2 exist in STObj    if (!all(c(CellType_1, CellType_2) %in% names(temp))) {     stop(\"Error: Cell types not found. Please check input\")   }    # Bind matrices from the two cell together   CellType1 <- temp[[CellType_1]]   CellType2 <- temp[[CellType_2]]   newAssay <- lapply(list(CellType1, CellType2), function(x) {     colnames(x) <- NULL     x   }) %>%     do.call(\"cbind\", .) %>%     list(\"Comparison\" = .)     colData_tmp <- colData(STObj)   rownames(colData_tmp) <- paste(rownames(colData_tmp), \"Bckgrnd\", sep = \"_\")   newColData <- rbind(colData(STObj), colData_tmp)   newColData$CellType <- c(     rep(\"Foreground\", nrow(colData_tmp)),     rep(\"Background\", nrow(colData_tmp))   )   newColData$Sample <- rownames(newColData)    allRanges <- SummarizedExperiment::rowRanges(STObj)   allRanges$Comparison <- GenomicRanges::mcols(allRanges)[, CellType_1] |     GenomicRanges::mcols(allRanges)[, CellType_2]    newObj <- SummarizedExperiment(     assays = newAssay,     colData = newColData,     rowRanges = allRanges,     metadata = STObj@metadata   )    diff <- getDifferentialAccessibleTiles(newObj,     cellPopulation = \"Comparison\",     groupColumn = \"CellType\",     foreground = \"Foreground\",     background = \"Background\",     fdrToDisplay = 0.2,     outputGRanges = outputGRanges,     numCores = numCores   )    return(diff) }"},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"full-featured-ides","dir":"Articles","previous_headings":"Style and Conventions","what":"Full-featured IDEs","title":"Lessons from Development","text":"(RStudio, VSCode, heavily modded Vim) > (text editor JupyterLab) RStudio basic linting, debugging tools, autocomplete, spellcheck, global search. RStudio also shows environment, features make writing ROxygen headers RMarkdown documentation easier. IDE may also let jump function object definitions, easily locate functions objects references.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"linters","dir":"Articles","previous_headings":"Style and Conventions","what":"Linters","title":"Lessons from Development","text":"linter “static code analysis” - see lintr R. greatly reduce cognitive load coding, help minimize mistakes, help conform style guidelines minimal effort. can often installed extensions IDE. use JupyterLab, can add lintr features jupyterlab-lsp following instructions: Install jupyterlab-lsp language servers Python R. Reboot JupyterLab features aren’t enabled reboot, go Settings tab -> Advanced Settings -> Language Server add lines user preferences: Example","code":"# Install jupyterlab-lsp pip install 'jupyterlab>=3.0.0,<4.0.0a0' jupyterlab-lsp # Install language servers for Python and R pip install 'python-lsp-server[all]' R -e 'install.packages(\"languageserver\")' {     \"language_servers\": {     \"pylsp\": {       \"serverSettings\": {         \"pyls.plugins.pydocstyle.enabled\": true,         \"pyls.plugins.pyflakes.enabled\": false,         \"pyls.plugins.flake8.enabled\": true       }     },     \"r-languageserver\": {       \"serverSettings\": {         \"r.lsp.debug\": false,         \"r.lsp.diagnostics\": true,         \"r.lsp.snippet_support\": true       }     }   } }"},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"automatic-code-styling","dir":"Articles","previous_headings":"Style and Conventions","what":"Automatic code styling","title":"Lessons from Development","text":"Opinionated tools making code tidier easier read share others. - (styler R)[https://github.com/r-lib/styler#styler] follows tidyverse style guide default. - (Black Python)[https://github.com/psf/black#-uncompromising-code-formatter] heavy-handed, important language like Python tabs spaces meaning.","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"package-repository-vs-storage-repository","dir":"Articles","previous_headings":"Maximizing use of GitHub","what":"Package repository vs storage repository","title":"Lessons from Development","text":"Usage MOCHA vs MOCHA_Manuscript ## Branching new features ## Pull Requests, Code Review, Branch Protections ## Versioning","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"devtoolscheck-yourself-frequently","dir":"Articles","previous_headings":"Preparing for CRAN","what":"devtools::check() yourself (frequently)","title":"Lessons from Development","text":"Frequently running devtools::check() catch missing documentation structural issues. unit tests also run . also catch namespace issues, though preferrably caught linter.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"cran-preferences","dir":"Articles","previous_headings":"Preparing for CRAN","what":"CRAN preferences","title":"Lessons from Development","text":"CRAN non-obvious opinions enforce. internal references functions within packages. E.g. internal function internalHelper() package MOCHA, CRAN want access via MOCHA:::internalHelper(). Instead, use directly like internalHelper(). message() output functions like warning() error() enforced using print(). useful StackOverFlow post goes details message() better use . output must suppressible. means adding verbose boolean argument functions printing warnings messages verbose==TRUE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"notes","dir":"Articles","previous_headings":"Preparing for CRAN > CRAN preferences","what":"NOTEs","title":"Lessons from Development","text":"Learned hard way: Running devtools::check() first time writing code without use linters automatic stylers resulted hundreds NOTES, one line violation found.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"manual-inspection-notes","dir":"Articles","previous_headings":"Preparing for CRAN > CRAN preferences","what":"Manual Inspection Notes","title":"Lessons from Development","text":"CRAN Manual inspection Please always explain acronyms description text. e.g.: ATAC references describing methods package, please add description field DESCRIPTION file form authors (year) <doi:…> authors (year) <arXiv:…> authors (year, ISBN:…) available: <https:…> space ‘doi:’, ‘arXiv:’, ‘https:’ angle brackets auto-linking. (want add title well please put quotes: “Title”) Size tarball: 5889964 bytes -> Please 5MB CRAN packages Please add .Rd files regarding exported methods explain functions results documentation. Please write structure output (class) also output means. (function return value, please document , e.g. similar) Missing Rd-tags:       GRangesToString.Rd:       StringsToGRanges.Rd: “Using foo:::f instead foo::f allows access unexported objects. generally recommended, semantics unexported objects may changed package author routine maintenance.” Please omit one colon. Used ::: documentation:       man/callOpenTiles-methods.Rd:          tiles <- MOCHA::callOpenTiles(ATACFragments = MOCHA:::ATACFragments, cellColData = MOCHA:::cellColData, blackList = MOCHA:::blackList, genome = MOCHA:::genome, TxDb = TxDb, Org = Org, outDir = “./test_out”, cellPopLabel = “Clusters”, cellPopulations = c(“C1”, “C2”), numCores = 1) used example really executed (e.g. missing additional software, missing API keys, …) user. ’s wrapping examples adds comment (“# run:”) warning user. seem necessary. Please unwrap examples executable < 5 sec, create additionally small toy examples allow automatic testing. (also replace , takes longer 5 sec executed, preferable automatic checks functions. Otherwise, can also write tests.) write information messages console easily suppressed. R like generate objects can used extract information user interested , print() object. Instead print()/cat() rather use message()/warning()  (verbose)cat(..) (maybe stop()) really write text console. (except print, summary, interactive functions) Please ensure functions write default examples/vignettes/tests user’s home filespace (including package directory getwd()). allowed CRAN policies. Please omit default path writing functions. examples/vignettes/tests can write tempdir().","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"dependencies-that-cause-issues","dir":"Articles","previous_headings":"Preparing for CRAN > Minimize dependencies","what":"Dependencies that cause issues","title":"Lessons from Development","text":"wCorr just updated received correspondance: Previously, depended motifmatchr, depends TFBSTools depends finally CNEr incorrectly declared license causing MOCHA fail CRAN’s pretest: week emailing CNEr package maintainer raising issue GitHub, decided just omit dependency making optional (moving Suggests DESCRIPTION) using conditionally.","code":"> Thanks, we see: > >     Package has a FOSS license but eventually depends on the following >     package which restricts use: >       CNEr > > and so I looked at the license. > It has a wrongly used \"| file LICENSE\" as that LICENSE suggests that the > GPL-2 declaration is invalid as it cannot be FOSS. I made a case for > this at BioC. > I see MOCHA is still in the “waiting” folder of CRAN incoming. Are we > waiting for the maintainers of CNEr to update their license in  Yes, otherwise you need to omit a dependency on a package with an invalid license.   > Bioconductor? Let me know if I can take any action to help this move > forward.  Give its maintainer a strong hint?"},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"dependencies-outside-of-standard-repositories","dir":"Articles","previous_headings":"Preparing for CRAN > Minimize dependencies","what":"Dependencies outside of standard repositories","title":"Lessons from Development","text":"ArchR standard repositories, even though move Suggests CRAN still locate outside repository - GitHub count. followed instructions using pacakge drat create repository containing package binaries ArchR update DESCRIPTION point Additional_repositories.","code":""},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"unit-tests","dir":"Articles","previous_headings":"Testing","what":"Unit Tests","title":"Lessons from Development","text":"testthat https://github.com/aifimmunology/MOCHA/tree/main/tests/testthat","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"test-coverage","dir":"Articles","previous_headings":"Testing > Unit Tests","what":"Test Coverage","title":"Lessons from Development","text":"covr","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"continuous-integration","dir":"Articles","previous_headings":"Testing","what":"Continuous Integration","title":"Lessons from Development","text":"[GitHub Actions run tests, CRAN checks)[https://github.com/aifimmunology/MOCHA/actions/workflows/R-CMD-check-manual.yml]","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"package-data","dir":"Articles","previous_headings":"Testing","what":"Package Data","title":"Lessons from Development","text":"https://r-pkgs.org/data.html https://github.com/aifimmunology/MOCHA/blob/main/data-raw/DATASET.R","code":""},{"path":[]},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"being-portable","dir":"Articles","previous_headings":"Miscellaneous","what":"Being portable","title":"Lessons from Development","text":"Design issue saving BSGenome object points specific location user’s filesystem","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Dev-Lessons.html","id":"keywords","dir":"Articles","previous_headings":"Preparing for Users > Writing Documentation","what":"Keywords","title":"Lessons from Development","text":"Keywords allow easily sort functions groups organizing documentation. See: - pkgdown https://pkgdown.r-lib.org/reference/build_reference.html#reference-index - ArchR’s reference page example https://www.archrproject.com/reference/index.html","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/articles/Results-Tips.html","id":"tips-result-formats","dir":"Articles","previous_headings":"","what":"Tips: Result Formats","title":"Results-Tips","text":"pipeline can run function--function, may wish inspect intermediate results use end results custom analyses. MOCHA outputs use common Bioconductor data structures. also provide getters accessing specific results.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/articles/Results-Tips.html","id":"callopentiles-results","dir":"Articles","previous_headings":"Tips: Result Formats","what":"callOpenTiles results","title":"Results-Tips","text":"output first step pipeline, MOCHA::callOpenTiles MultiAssayExperiment organizing open-tiles cell population. input next function, MOCHA::getSampleTileMatrices. Sample-level metadata can accessed using colData(tileResults). specific cell population’s results stored RaggedExperiment. object stores ranged data alongside sample-level metadata.","code":"> tileResults A MultiAssayExperiment object of 3 listed  experiments with user-defined names and respective classes.  Containing an ExperimentList class object of length 3:  [1] MAIT: RaggedExperiment with 2741985 rows and 6 columns  [2] CD16 Mono: RaggedExperiment with 2204602 rows and 6 columns  [3] DC: RaggedExperiment with 1439585 rows and 6 columns Functionality:  experiments() - obtain the ExperimentList instance  colData() - the primary/phenotype DataFrame  sampleMap() - the sample coordination DataFrame  `$`, `[`, `[[` - extract colData columns, subset, or experiment  *Format() - convert into a long or wide DataFrame  assays() - convert ExperimentList to a SimpleList of matrices  exportClass() - save data to flat files # Get open tiles for DC cells > DCcellRaggedExp <- tileResults[[\"DC\"]] > DCcellRaggedExp class: RaggedExperiment  dim: 1439585 6  assays(7): tileID TotalIntensity ... PredictionStrength peak rownames: NULL colnames(6): B011-AP0C1W3 B011-AP0C1W8 ... B025_FSQAAZ0C00P-07   B025_FSQAAZ0BZZS-01 colData names(0):  # You can access the underlying GRanges object containing ranges for all samples > rowRanges(DCcellRaggedExp) GRanges object with 1439585 ranges and 0 metadata columns:             seqnames              ranges strand                <Rle>           <IRanges>  <Rle>         [1]     chr1       812500-812999      *         [2]     chr1       816000-816499      *         [3]     chr1       817000-817499      *         [4]     chr1       819000-819499      *         [5]     chr1       819500-819999      *         ...      ...                 ...    ...   [1439581]     chrX 155841500-155841999      *   [1439582]     chrX 155881000-155881499      *   [1439583]     chrX 155888000-155888499      *   [1439584]     chrX 155891500-155891999      *   [1439585]     chrX 155964000-155964499      *   -------   seqinfo: 24 sequences from an unspecified genome; no seqlengths"},{"path":"https://aifimmunology.github.io/MOCHA/articles/Results-Tips.html","id":"getsampletilematrix-results","dir":"Articles","previous_headings":"Tips: Result Formats","what":"getSampleTileMatrix results","title":"Results-Tips","text":"output getSampleTileMatrix SummarizedExperiment organizing sample-tile matrices cell population. input MOCHA::getDifferentialAccessibleTiles downstream analyses. also holds metadata related genome, transcript database, annotations: metadata(SampleTileMatrices) Individual sample-tile matrices cell population can accessed follows. filtered return tiles called given cell population.","code":"> SampleTileMatrices class: RangedSummarizedExperiment  dim: 212445 6  metadata(6): Log2Intensity NAtoZero ... Org Directory assays(3): MAIT CD16 Mono DC rownames(212445): chr1:1000000-1000499 chr1:100028500-100028999 ...   chrY:7730500-7730999 chrY:7940000-7940499 rowData names(3): MAIT CD16 Mono DC colnames(6): B011-AP0C1W3 B011-AP0C1W8 ... B025_FSQAAZ0C00P-07   B025_FSQAAZ0C0YJ-01 colData names(178): Sample PassQC ... ATAC_WellID AIFI.Batch # Get the sample-tile matrix for DC cells DCcellsMatrix <- MOCHA::getCellPopMatrix(SampleTileMatrices, \"DC\") # Get the sample-tile matrix for MAIT cells MAITcellsMatrix <- MOCHA::getCellPopMatrix(SampleTileMatrices, \"MAIT\")"},{"path":"https://aifimmunology.github.io/MOCHA/articles/Results-Tips.html","id":"getdifferentialaccessibletiles-results","dir":"Articles","previous_headings":"Tips: Result Formats","what":"getDifferentialAccessibleTiles results","title":"Results-Tips","text":"Results MOCHA::getDifferentialAccessibleTiles given data.table can filtered using data.table syntax: Note statistics poor due small # samples example vignette.","code":"> differentials[FDR<0.4]                           Tile CellPopulation Foreground Background   P_value    1:     chr1:1000000-1000499           MAIT   Positive   Negative 0.0808556    2: chr1:100038500-100038999           MAIT   Positive   Negative 0.0808556    3:   chr1:10032500-10032999           MAIT   Positive   Negative 0.0808556    4: chr1:100424000-100424499           MAIT   Positive   Negative 0.0808556    5: chr1:100927500-100927999           MAIT   Positive   Negative 0.0808556   ---                                                                         8048:   chrX:77899000-77899499           MAIT   Positive   Negative 0.0808556 8049:   chrX:77910500-77910999           MAIT   Positive   Negative 0.0808556 8050:   chrX:78104000-78104499           MAIT   Positive   Negative 0.0808556 8051:   chrX:78945000-78945499           MAIT   Positive   Negative 0.0808556 8052:     chrX:9464500-9464999           MAIT   Positive   Negative 0.0808556       Test-Statistic       FDR    Log2FC_C   MeanDiff Avg_Intensity_Case    1:       3.047619 0.3457015  0.01558005  0.2991209           3.803282    2:       3.047619 0.3457015 -0.03178178 -0.2803330           3.948745    3:       3.047619 0.3457015  0.02554094  0.3312654           4.103977    4:       3.047619 0.3457015 -0.17011403 -1.6639420           3.500481    5:       3.047619 0.3457015 -0.08410144 -0.6814757           3.689488   ---                                                                    8048:       3.047619 0.3457015  0.02367545  0.2179824           3.916536 8049:       3.047619 0.3457015  0.02077454  0.2111809           4.019993 8050:       3.047619 0.3457015  0.01051873  0.1599092           4.039884 8051:       3.047619 0.3457015 -0.12853838 -1.2824704           3.670366 8052:       3.047619 0.3457015 -0.08677006 -0.7969690           3.660102       Pct0_Case Avg_Intensity_Control Pct0_Control    1:         0              3.787702            0    2:         0              3.956360            0    3:         0              4.079114            0    4:         0              3.746133            0    5:         0              3.746400            0   ---                                              8048:         0              3.907190            0 8049:         0              3.999219            0 8050:         0              4.032155            0 8051:         0              3.798904            0 8052:         0              3.755235            0"},{"path":"https://aifimmunology.github.io/MOCHA/articles/Results-Tips.html","id":"getcoaccessiblelinks-results","dir":"Articles","previous_headings":"Tips: Result Formats","what":"getCoAccessibleLinks results","title":"Results-Tips","text":"Results MOCHA::getCoAccessibleLinks given data.frame can filtered according correlation using MOCHA::filterCoAccessibleLinks.","code":"> links      Correlation                Tile1                Tile2   1:   0.5481481 chrY:7326500-7326999 chrY:6964500-6964999   2:   0.5481481 chrY:7326500-7326999 chrY:6965000-6965499   3:   0.6666667 chrY:7326500-7326999 chrY:7040500-7040999   4:   0.7259259 chrY:7326500-7326999 chrY:7085000-7085499   5:   0.8444444 chrY:7326500-7326999 chrY:7085500-7085999  ---                                                       126:   0.4166667 chrY:7344500-7344999 chrY:7300000-7300499 127:   0.6666667 chrY:7344500-7344999 chrY:7310500-7310999 128:   0.6666667 chrY:7344500-7344999 chrY:7311000-7311499 129:   0.6666667 chrY:7344500-7344999 chrY:7326000-7326499 130:   0.3333333 chrY:7344500-7344999 chrY:7340000-7340499   > MOCHA::filterCoAccessibleLinks(links, threshold = 0.7)     Correlation                Tile1                Tile2  chr   start     end  1:   0.7259259 chrY:7326500-7326999 chrY:7085000-7085499 chrY 7085000 7326999  2:   0.8444444 chrY:7326500-7326999 chrY:7085500-7085999 chrY 7085500 7326999  3:   0.7851852 chrY:7326500-7326999 chrY:7099500-7099999 chrY 7099500 7326999  4:   0.7259259 chrY:7326500-7326999 chrY:7279500-7279999 chrY 7279500 7326999  5:   0.9037037 chrY:7326500-7326999 chrY:7280000-7280499 chrY 7280000 7326999"},{"path":"https://aifimmunology.github.io/MOCHA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samir Rachid Zaim. Author, contributor. Mark-Phillip Pebworth. Author, contributor. Imran McGrath. Author, maintainer. Lauren Okada. Author, contributor. Xiaojun Li. Author, contributor.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rachid Zaim S, Pebworth M, McGrath , Okada L, Li X (2023). MOCHA: Modeling Single-Cell Open Chromatin Analysis. https://aifimmunology.github.io/MOCHA/, https://github.com/aifimmunology/MOCHA.","code":"@Manual{,   title = {MOCHA: Modeling for Single-Cell Open Chromatin Analysis},   author = {Samir {Rachid Zaim} and Mark-Phillip Pebworth and Imran McGrath and Lauren Okada and Xiaojun Li},   year = {2023},   note = {https://aifimmunology.github.io/MOCHA/, https://github.com/aifimmunology/MOCHA}, }"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"mocha-model-based-single-cell-open-chromatin-analysis","dir":"","previous_headings":"","what":"Modeling for Single-Cell Open Chromatin Analysis","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"MOCHA R package meant enable robust sample-specific scATAC analysis providing novel single-cell peak-calling algorithm leveraging latest zero-inflated statistical methods. hope package enable translational research scATAC datasets addressing statistical issues around peak calling, differential accessibility, co-accessibility, repeated measures. goal enable intuitive robust identification open chromatin, differential accessibility, co-accessibility biomedical researchers can leverage scATAC datasets identify therapeutic targets. Find visiting MOCHA website.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Installation Overview Contact","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Install binaries (stable release CRAN): Install source: Install specific development branch source:","code":"install.packages(\"MOCHA\") devtools::install_github(\"aifimmunology/MOCHA\") devtools::install_github(\"aifimmunology/MOCHA\", ref = \"your_branch_name\")"},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-usage-overview","dir":"","previous_headings":"","what":"Usage Overview","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"Please view example usage found vignette found vignettes/COVID-walkthrough.html. example usage demonstrates workflow:","code":""},{"path":"https://aifimmunology.github.io/MOCHA/index.html","id":"id_-contact","dir":"","previous_headings":"","what":"Contact","title":"Modeling for Single-Cell Open Chromatin Analysis","text":"contact developers issues feature requests, please contact us via GitHub’s discussions tab feature requests, open issues bugs.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":null,"dir":"Reference","previous_headings":"","what":"GRangesToString Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","title":"GRangesToString Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"GRangesToString Turns GRanges Object  list strings format chr1:100-200","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRangesToString Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"","code":"GRangesToString(GR_obj)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GRangesToString Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"GR_obj GRanges object convert string","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/GRangesToString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GRangesToString Converts a GRanges object to a string in the format 'chr1:100-200' — GRangesToString","text":"string list strings format 'chr1:100-200' representing  ranges input GRanges","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"MotifEnrichment — MotifEnrichment","title":"MotifEnrichment — MotifEnrichment","text":"Test enrichment motifs within Group1 background   Group2 using hypergeometric t-test.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MotifEnrichment — MotifEnrichment","text":"","code":"MotifEnrichment(Group1, Group2, motifPosList, type = NULL)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MotifEnrichment — MotifEnrichment","text":"Group1 GRanges object, set significant differential tiles. Group2 GRanges object containing background regions, non-overlapping Group1 motifPosList GRangesList motifs positions motif. Must named motif. type Optional, name metadata column Group1 Group2 test enrichment number unique entries column given 'type'. Default NULL, tests number Ranges.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/MotifEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MotifEnrichment — MotifEnrichment","text":"data.frame containing enrichment group","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"StringsToGRanges — StringsToGRanges","title":"StringsToGRanges — StringsToGRanges","text":"StringsToGRanges Turns list strings format chr1:100-200   GRanges object","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StringsToGRanges — StringsToGRanges","text":"","code":"StringsToGRanges(regionString)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StringsToGRanges — StringsToGRanges","text":"regionString string list strings format chr1:100-200","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/StringsToGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"StringsToGRanges — StringsToGRanges","text":"GRanges object ranges representing input string(s)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":null,"dir":"Reference","previous_headings":"","what":"addAccessibilityShift — addAccessibilityShift","title":"addAccessibilityShift — addAccessibilityShift","text":"addAccessibilityShift add new condition SummarizedExperiment output extractRegion, \t\t\t\t\t\t\t\tcontain difference accessibility two conditions","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addAccessibilityShift — addAccessibilityShift","text":"","code":"addAccessibilityShift(CountSE, foreground, background, assayName = NULL)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addAccessibilityShift — addAccessibilityShift","text":"CountSE SummarizedExperiment object output extractRegion foreground Group used foreground subtraction accessibility background Group used background subtraction accessibility assayName name given new assay difference accessibility foreground background.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addAccessibilityShift — addAccessibilityShift","text":"countSE SummarizedExperiment containing coverage given input cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addAccessibilityShift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addAccessibilityShift — addAccessibilityShift","text":"","code":"if (FALSE) { # CountSE is a SummarizedExperiment generated by extractRegion() countSE <- MOCHA::addAccessibilityShift(   CountSE = CountSE,   foreground = \"Condition1\",   background = \"Condition2\",   assayName = \"AccessibilityChanges\" ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":null,"dir":"Reference","previous_headings":"","what":"addMotifSet — addMotifSet","title":"addMotifSet — addMotifSet","text":"addMotifSet Identify motifs within peakset.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addMotifSet — addMotifSet","text":"","code":"addMotifSet(   SampleTileMatrix,   motifPWMs,   w = 7,   returnSTM = TRUE,   motifSetName = \"Motifs\" )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addMotifSet — addMotifSet","text":"SampleTileMatrix SummarizedExperiment, specifically output getSampleTileMatrix motifPWMs pwms object motif database. Either PFMatrix, PFMatrixList, PWMatrix, PWMatrixList w Parameter motifmatchr controlling size basepairs window filtration. Default 7. returnSTM TRUE, return modified SampleTileMatrix motif set added metadata (default). FALSE, return just motifs motifmatchr. motifSetName Name give motifList SampleTileMatrix's metadata `returnSTM=TRUE`. Default 'Motifs'.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addMotifSet — addMotifSet","text":"modified SampleTileMatrix motifs added metadata","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/addMotifSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addMotifSet — addMotifSet","text":"","code":"if (FALSE) { # load a curated motif set from library(chromVARmotifs) # included with ArchR installation data(human_pwms_v2) SE_with_motifs <- addMotifSet(   SampleTileMatrix,   motifPWMs = human_pwms_v2,   returnSTM = TRUE, motifSetName = \"Motifs\", w = 7 ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"annotateTiles — annotateTiles","title":"annotateTiles — annotateTiles","text":"annotateTiles annotates set sample-tile matrices   given gene annotations. Details TxDb Org annotation packages   available annotations can found Bioconductor:   https://bioconductor.org/packages/3.15/data/annotation/","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"annotateTiles — annotateTiles","text":"","code":"annotateTiles(Obj, TxDb = NULL, Org = NULL, promoterRegion = c(2000, 100))"},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"annotateTiles — annotateTiles","text":"Obj RangedSummarizedExperment generated getSampleTileMatrix, containing TxDb Org metadata. may also GRanges object. TxDb annotation package TxDb object genome. Optional, required Obj GRanges. Org genome-wide annotation organism. Optional, required Obj GRanges. promoterRegion Optional list containing window size basepairs defining promoter region. format (upstream, downstream). Default (2000, 100).","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"annotateTiles — annotateTiles","text":"Obj, input data structure added gene annotations (whether GRanges SampleTileObj)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/annotateTiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"annotateTiles — annotateTiles","text":"","code":"if (FALSE) { library(TxDb.Hsapiens.UCSC.hg38.refGene) library(org.Hs.eg.db)  SampleTileMatricesAnnotated <- MOCHA::annotateTiles(   SampleTileMatrices,   TxDb = TxDb.Hsapiens.UCSC.hg38.refGene,   Org = org.Hs.eg.db ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","title":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","text":"callOpenTiles main peak-calling function MOCHA   serves wrapper function call peaks provided set fragment   files ArchR Project meta-data purposes","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","text":"","code":"callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   TxDb,   OrgDb,   outDir,   fast = FALSE,   numCores = 30,   verbose = FALSE,   force = FALSE )  # S4 method for GRangesList callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   TxDb,   OrgDb,   outDir,   numCores = 30,   verbose = FALSE,   force = FALSE )  # S4 method for list callOpenTiles(   ATACFragments,   cellColData,   blackList,   genome,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   TxDb,   OrgDb,   outDir,   numCores = 30,   verbose = FALSE,   force = FALSE )  .callOpenTiles_ArchR(   ATACFragments,   cellPopLabel,   cellPopulations = \"ALL\",   studySignal = NULL,   TxDb,   OrgDb,   outDir = NULL,   fast = FALSE,   numCores = 30,   verbose = FALSE,   force = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","text":"ATACFragments ArchR Project, GRangesList fragments cellColData DataFrame containing cell-level metadata 'Sample'  column blackList GRanges blacklisted regions genome BSgenome object, full name installed  BSgenome data package, short string specifying name NCBI  assembly (e.g. \"GRCh38\", \"TAIR10.1\", etc...) UCSC genome (e.g. \"hg38\",  \"bosTau9\", \"galGal6\", \"ce11\", etc...). supplied short string must refer unambiguously installed BSgenome data package. See  getBSgenome. cellPopLabel string indicating column ArchRProject metadata contains cell population label. cellPopulations vector strings. Cell subsets call peaks. list group names must identical names appear ArchRProject metadata.  Optional, cellPopulations='', peak calling done cell populations ArchR project metadata. Default ''. studySignal median signal (number fragments) study.  set, calculated using input ArchR project relies  assumption ArchR project encompasses whole study (.e.  subset). TxDb exact package name TxDb-class transcript annotation  package organism (e.g. \"TxDb.Hsapiens.UCSC.hg38.refGene\").  must installed. See   Bioconductor AnnotationData Packages. OrgDb exact package name OrgDb-class genome wide annotation  package organism (e.g. \"org.Hs.eg.db\"). must installed.  See  Bioconductor AnnotationData Packages outDir string describing output directory coverage files. Must complete directory string. ArchR input, set outDir NULL  create directory within input ArchR project directory named MOCHA saving files. fast Optional, set TRUE use faster memory-intensive numCores integer. Number cores parallelize peak-calling across multiple cell populations. verbose Set TRUE display additional messages. Default FALSE. force Optional, whether force creation coverage files already exist. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","text":"tileResults MultiAssayExperiment object containing ranged data   tile","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/callOpenTiles-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"callOpenTiles Perform peak-calling on a set of fragments or an \n  ArchR Project. — callOpenTiles","text":"","code":"if (FALSE) { # Starting from an ArchR Project: tileResults <- MOCHA::callOpenTiles(   ArchRProj = myArchRProj,   cellPopLabel = \"celltype_labeling\",   cellPopulations = \"CD4\",   TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",   OrgDb = \"org.Hs.eg.db\",   numCores = 1 ) } # \\donttest{ # Starting from GRangesList if (   requireNamespace(BSgenome.Hsapiens.UCSC.hg19) &&     requireNamespace(TxDb.Hsapiens.UCSC.hg38.refGene) &&     requireNamespace(org.Hs.eg.db) ) {   tiles <- MOCHA::callOpenTiles(     ATACFragments = MOCHA::exampleFragments,     cellColData = MOCHA::exampleCellColData,     blackList = MOCHA::exampleBlackList,     genome = \"BSgenome.Hsapiens.UCSC.hg19\",     TxDb = \"TxDb.Hsapiens.UCSC.hg38.refGene\",     OrgDb = \"org.Hs.eg.db\",     outDir = tempdir(),     cellPopLabel = \"Clusters\",     cellPopulations = c(\"C2\", \"C5\"),     numCores = 1   ) } #> Error in requireNamespace(BSgenome.Hsapiens.UCSC.hg19): object 'BSgenome.Hsapiens.UCSC.hg19' not found # }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"combineSampleTileMatrix — combineSampleTileMatrix","title":"combineSampleTileMatrix — combineSampleTileMatrix","text":"combineSampleTileMatrix combines celltypes   SampleTileMatrix object SummarizedExperiment one single matrix   across cell types samples, annotating GC bias using   chromVAR.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combineSampleTileMatrix — combineSampleTileMatrix","text":"","code":"combineSampleTileMatrix(SampleTileMatrix, NAtoZero = TRUE, verbose = FALSE)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combineSampleTileMatrix — combineSampleTileMatrix","text":"SampleTileMatrix SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices verbose Set TRUE display additional messages. Default FALSE. NAToZero Set NA values sample-tile matrix zero","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/combineSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combineSampleTileMatrix — combineSampleTileMatrix","text":"TileCorr data.table correlation matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"differentialsToGRanges Converts a data.frame matrix to a GRanges,\n  preserving additional columns as GRanges metadata — differentialsToGRanges","title":"differentialsToGRanges Converts a data.frame matrix to a GRanges,\n  preserving additional columns as GRanges metadata — differentialsToGRanges","text":"differentialsToGRanges Converts data.frame matrix GRanges,   preserving additional columns GRanges metadata","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"differentialsToGRanges Converts a data.frame matrix to a GRanges,\n  preserving additional columns as GRanges metadata — differentialsToGRanges","text":"","code":"differentialsToGRanges(differentials, tileColumn = \"Tile\")"},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"differentialsToGRanges Converts a data.frame matrix to a GRanges,\n  preserving additional columns as GRanges metadata — differentialsToGRanges","text":"differentials matrix/data.frame column tileColumn containing region strings format \"chr:start-end\" tileColumn name column containing region strings. Default \"Tile\".","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/differentialsToGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"differentialsToGRanges Converts a data.frame matrix to a GRanges,\n  preserving additional columns as GRanges metadata — differentialsToGRanges","text":"GRanges containing original information","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-counts_plot_default_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Default ggplot theme for counts plot — .counts_plot_default_theme","title":"Default ggplot theme for counts plot — .counts_plot_default_theme","text":"Default ggplot theme counts plot","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-counts_plot_default_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default ggplot theme for counts plot — .counts_plot_default_theme","text":"","code":".counts_plot_default_theme"},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-counts_plot_default_theme.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default ggplot theme for counts plot — .counts_plot_default_theme","text":"object class list length 10.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Common theme for gene plots — .gene_plot_theme","title":"Common theme for gene plots — .gene_plot_theme","text":"Common theme gene plots","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common theme for gene plots — .gene_plot_theme","text":"","code":".gene_plot_theme"},{"path":"https://aifimmunology.github.io/MOCHA/reference/dot-gene_plot_theme.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common theme for gene plots — .gene_plot_theme","text":"object class list length 5.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleBlackList — exampleBlackList","title":"exampleBlackList — exampleBlackList","text":"Example input blackList extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleBlackList — exampleBlackList","text":"","code":"exampleBlackList"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleBlackList.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleBlackList — exampleBlackList","text":"GRanges object 210 ranges 2 metadata columns","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleCellColData — exampleCellColData","title":"exampleCellColData — exampleCellColData","text":"Example input cellColData extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleCellColData — exampleCellColData","text":"","code":"exampleCellColData"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleCellColData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleCellColData — exampleCellColData","text":"DataFrame 2217 rows 3 columns","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleFragments — exampleFragments","title":"exampleFragments — exampleFragments","text":"Example input ATAC fragments extracted PBMC_Small dataset consisting 2k cells spanning chr1 2 (~2-300MB). subset consists two cell populations: Clusters C2 C5. data publicly available ArchR package <https://www.archrproject.com/reference/getTestProject.html>","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleFragments — exampleFragments","text":"","code":"exampleFragments"},{"path":"https://aifimmunology.github.io/MOCHA/reference/exampleFragments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleFragments — exampleFragments","text":"list 2 GRanges objects","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"extractRegion — extractRegion","title":"extractRegion — extractRegion","text":"extractRegion extract coverage files created   callOpenTiles return specific region's coverage","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractRegion — extractRegion","text":"","code":"extractRegion(   SampleTileObj,   region,   cellPopulations = \"ALL\",   groupColumn = NULL,   subGroups = NULL,   sampleSpecific = FALSE,   approxLimit = 1e+05,   binSize = 250,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractRegion — extractRegion","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix region GRanges object vector strings containing regions compute co-accessible links. Strings must format \"chr:start-end\", e.g. \"chr4:1300-2222\". cellPopulations vector strings. Cell subsets call peaks. list group names must identical names appear SampleTileObj.  Optional, cellPopulations='', peak calling done cell populations. Default ''. groupColumn Optional, column containing sample group labels returning coverage within sample groups. Default NULL, samples used. subGroups list subgroup(s) within groupColumn metadata. Optional, default NULL, labels within groupColumn used. sampleSpecific TRUE, get sample-specific count dataframe . Default FALSE, average across samples get dataframe . approxLimit Optional limit region size, region larger approxLimit basepairs, binning used. Default 100000. binSize Optional, size bins basepairs binning used. Default 250. numCores integer. Number cores parallelize peak-calling across multiple cell populations verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extractRegion — extractRegion","text":"countSE SummarizedExperiment containing coverage given input cell populations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/extractRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extractRegion — extractRegion","text":"","code":"if (FALSE) { countSE <- MOCHA::extractRegion(   SampleTileObj = SampleTileMatrices,   cellPopulations = \"ALL\",   region = \"chr1:18137866-38139912\",   numCores = 30,   sampleSpecific = FALSE ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":null,"dir":"Reference","previous_headings":"","what":"filterCoAccessibleLinks — filterCoAccessibleLinks","title":"filterCoAccessibleLinks — filterCoAccessibleLinks","text":"filterCoAccessibleLinks filter output   getCoAccessibleLinks threshold, retaining links   absolute correlation greater threshold.   function also adds chr, start, end site link   output table.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filterCoAccessibleLinks — filterCoAccessibleLinks","text":"","code":"filterCoAccessibleLinks(TileCorr, threshold = 0.5)"},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filterCoAccessibleLinks — filterCoAccessibleLinks","text":"TileCorr correlation table output getCoAccessibleLinks threshold Keep","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filterCoAccessibleLinks — filterCoAccessibleLinks","text":"FilteredTileCorr filtered correlation table chr,   start, end site link","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/filterCoAccessibleLinks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filterCoAccessibleLinks — filterCoAccessibleLinks","text":"","code":"if (FALSE) { # links is the output of MOCHA::getCoAccessibleLinks MOCHA::filterCoAccessibleLinks(links, threshold = 0.5) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":null,"dir":"Reference","previous_headings":"","what":"finalModelObject — finalModelObject","title":"finalModelObject — finalModelObject","text":"Trained MOCHA models - LOESS linear regression","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"finalModelObject — finalModelObject","text":"","code":"finalModelObject"},{"path":"https://aifimmunology.github.io/MOCHA/reference/finalModelObject.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"finalModelObject — finalModelObject","text":"list lists containing 2 items: \"Loess\" \"Linear\" \"Total\" \"Max\" \"Intercept\" Loess LOESS model Linear Linear model","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":null,"dir":"Reference","previous_headings":"","what":"getAltTSS Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","title":"getAltTSS Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"getAltTSS Pulls peaks fall TSS,   annotates name gene, identifies genes   evidence alternatively regulated TSSs, including type (  open TSSs gene significantly (less) accessible),   type ii (multiple TSSs significant different,   accessible others less). Alternatively, function  return   open TSSs differential measurements returnAllTSS flag set   TRUE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getAltTSS Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"","code":"getAltTSS(   completeDAPs,   returnAllTSS = FALSE,   nuancedTSS = TRUE,   nuancedTSSGap = 150,   threshold = 0.2,   TxDb = TxDb.Hsapiens.UCSC.hg38.refGene,   Org = org.Hs.eg.db )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getAltTSS Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"completeDAPs GRanges object contains differential measurements across peaks (unfiltered DAPs). also work data.frame data.table version GRanges object. want alternatively regulated TSSs, object must include column names 'FDR', 'Log2FC_C', standard MOCHA differentials. returnAllTSS Flag return TSSs DAPs measurements, without filtering alternative TSS usage. multiple TSSs fall within tile, tile repeated TSS. nuancedTSS True/False flag determine alternative TSS genes filtered differential TSS usage falls within small range. Default TRUE threshold FDR Threshold determining significant vs non-significant changes accessibility. Following MOCHA's standards, default 0.2. nuancedTSSGAP Minimum distance betweeen TSSs needed considered distinctly regulated TSSs. two TSSs close, unclear highly unlikely ATAC data can distinguish . Default 150 bp.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getAltTSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getAltTSS Annotate Peaks falling in Transcription Start Sites\n  (TSS) and identify alternatively regulated TSSs for each gene. — getAltTSS","text":"tpeaks GRanges containing annotated peaks falling TSS","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"getCellPopMatrix — getCellPopMatrix","title":"getCellPopMatrix — getCellPopMatrix","text":"getCellPopMatrix pulls SampleTileMatrix tiles called one   given cell population.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCellPopMatrix — getCellPopMatrix","text":"","code":"getCellPopMatrix(   SampleTileObj,   cellPopulation,   dropSamples = TRUE,   NAtoZero = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCellPopMatrix — getCellPopMatrix","text":"SampleTileObj output getSampleTileMatrix, SummarizedExperiment pseudobulk intensities across tiles & cell types. cellPopulation cell population want pull . dropSamples Boolean flag determine whether drop samples small peak calling. NAtoZero Boolean flag determine whether replace NAs zero","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCellPopMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getCellPopMatrix — getCellPopMatrix","text":"sampleTileMatrix matrix samples called tiles given cell population.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":null,"dir":"Reference","previous_headings":"","what":"getCoAccessibleLinks — getCoAccessibleLinks","title":"getCoAccessibleLinks — getCoAccessibleLinks","text":"getCoAccessibleLinks takes input set regions (tiles) finds co-accessible neighboring regions within window. Co-accessibility defined correlation two region intensity (openness) across samples.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getCoAccessibleLinks — getCoAccessibleLinks","text":"","code":"getCoAccessibleLinks(   SampleTileObj,   cellPopulation = \"All\",   regions,   chrChunks = 1,   windowSize = 1 * 10^6,   numCores = 1,   ZI = TRUE,   approximateTile = FALSE,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getCoAccessibleLinks — getCoAccessibleLinks","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices cellPopulation string denoting cell population interest, must present SampleTileObj regions GRanges object vector strings containing regions compute co-accessible links. Strings must format \"chr:start-end\", e.g. \"chr4:1300-2222\". Can output getDifferentialAccessibleTiles. chrChunks functions subsets groups chromosome, parallelizes within group chromosomes running correlations. method keeps memory low. speed things high performing platforms, can chunk one chromosome time. Default chrChunks = 1, one chromosome time. windowSize size window, basepairs, around input region search co-accessible links numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. approximateTile set TRUE, use tiles overlap regions given, instead finding exact match regions variable. Default FALSE. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getCoAccessibleLinks — getCoAccessibleLinks","text":"TileCorr data.table correlation matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getCoAccessibleLinks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getCoAccessibleLinks — getCoAccessibleLinks","text":"technical details zero-inflated correlation can          found : Pimentel, Ronald Silva, \"Kendall's Tau Spearman's Rho               Zero-Inflated Data\" (2009). Dissertations. implementation (scHOT R package), can found :               http://www.bioconductor.org/packages/release/bioc/html/scHOT.html","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","title":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","text":"getDifferentialAccessibleTiles allows   determine whether regions chromatin differentially accessible   groups conducting test","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","text":"","code":"getDifferentialAccessibleTiles(   SampleTileObj,   cellPopulation,   groupColumn,   foreground,   background,   signalThreshold = 12,   minZeroDiff = 0.5,   fdrToDisplay = 0.2,   outputGRanges = TRUE,   numCores = 2,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","text":"SampleTileObj SummarizedExperiment object output getSampleTileMatrix cellPopulation string denoting cell population interest groupColumn column containing sample group labels foreground foreground group samples differential comparison background background group samples differential comparison signalThreshold Minimum median intensity required keep tiles differential testing increase statistical power small sample cohorts. Default 12. minZeroDiff Minimum difference average dropout rates across groups require keep tiles differential testing. Default 0.5 (50%). fdrToDisplay False-discovery rate used standard output messaging. Default 0.2. outputGRanges Outputs GRanges TRUE data.frame FALSE. Default TRUE. numCores number cores use multiprocessing. Default 1. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","text":"full_results differential accessibility results GRanges   matrix data.frame depending flag `outputGRanges`.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getDifferentialAccessibleTiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDifferentialAccessibleTiles — getDifferentialAccessibleTiles","text":"","code":"if (FALSE) { cellPopulation <- \"MAIT\" foreground <- \"Positive\" background <- \"Negative\" # Standard output will display the number of tiles found below a false-discovery rate threshold. # This parameter does not filter results and only affects the aforementioned message. fdrToDisplay <- 0.2 # Choose to output a GRanges or data.frame. # Default is TRUE outputGRanges <- TRUE # SampleTileMatrices is the output of MOCHA::getSampleTileMatrix differentials <- MOCHA::getDifferentialAccessibleTiles(   SampleTileObj = SampleTileMatrices,   cellPopulation = cellPopulation,   groupColumn = groupColumn,   foreground = foreground,   background = background,   fdrToDisplay = fdrToDisplay,   outputGRanges = outputGRanges,   numCores = numCores ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fragments by populations from an ArchR Project — getPopFrags","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"getPopFrags returns list fragments per cell subset GRanges.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"","code":"getPopFrags(   ArchRProj,   metaColumn,   cellSubsets = \"ALL\",   region = NULL,   numCores = 1,   sampleSpecific = TRUE,   NormMethod = \"nfrags\",   blackList = NULL,   verbose = FALSE,   overlapList = 50 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"ArchRProj ArchR Project. metaColumn name metadata column contains populations cells want merge export. cellSubsets Default ''. want export groups, give list group names. needs unique - duplicated names. list group names must identical names appear metadata column ArchR Project (e.g. metaColumn). region Optional parameter. Set want extract fragments particular regions genome. Format string (e.g. 'chr1:1000-2000'), GRanges object. numCores Number cores use. sampleSpecific Set TRUE subset cells sample NormMethod Normalization method. Can either \"nFrags\",\"nCells\", \"Median\". blackList Blacklisted region filter . Default filter anything (.e. NULL). Input provided GRanges object. fragments certain overlap thrown . verbose Set TRUE display additional messages. Default FALSE. overlapList minimum overlap necessary fragment marked overlapping blacklist region thus thrown .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getPopFrags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fragments by populations from an ArchR Project — getPopFrags","text":"list GRanges containing fragments. GRanges corresponds   population defined cellSubsets (sample,  sampleSpecific=TRUE)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"getSampleTileMatrix — getSampleTileMatrix","title":"getSampleTileMatrix — getSampleTileMatrix","text":"getSampleTileMatrix takes output peak calling   callOpenTiles creates sample-tile matrices containing signal   intensity tile.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getSampleTileMatrix — getSampleTileMatrix","text":"","code":"getSampleTileMatrix(   tileResults,   cellPopulations = \"ALL\",   groupColumn = NULL,   threshold = 0.2,   numCores = 1,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getSampleTileMatrix — getSampleTileMatrix","text":"tileResults MultiAssayExperiment returned callOpenTiles containing containing peak calling results. cellPopulations vector strings. Cell subsets TileResults generate sample-tile matrices. list group names must identical names appear ArchRProject metadata.  cellPopulations='', peak calling done cell populations ArchR project metadata. Default ''. groupColumn Optional, column containing sample group labels determining consensus tiles within sample groups. Default NULL, samples used determining consensus tiles. threshold Threshold consensus tiles, minimum % samples (within sample group, groupColumn set) peak must called retained. set 0, retain union samples' peaks (equivalent threshold 1/numSamples). recommended tune parameter omit potentially spurious peaks. numCores Optional, number cores use multiprocessing. Default 1. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getSampleTileMatrix — getSampleTileMatrix","text":"SampleTileMatrices MultiAssayExperiment containing sample-tile   intensity matrix cell population","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/getSampleTileMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getSampleTileMatrix — getSampleTileMatrix","text":"","code":"# \\donttest{ # Starting from GRangesList if (   require(BSgenome.Hsapiens.UCSC.hg19) &&    require(TxDb.Hsapiens.UCSC.hg38.refGene) &&    require(org.Hs.eg.db) ) { tiles <- MOCHA::callOpenTiles(   ATACFragments = MOCHA::exampleFragments,   cellColData = MOCHA::exampleCellColData,   blackList = MOCHA::exampleBlackList,   genome = BSgenome.Hsapiens.UCSC.hg19,   TxDb = TxDb.Hsapiens.UCSC.hg38.refGene,   Org = org.Hs.eg.db,   outDir = tempdir(),   cellPopLabel = \"Clusters\",   cellPopulations = c(\"C2\", \"C5\"),   numCores = 1 )  SampleTileMatrices <- MOCHA::getSampleTileMatrix(   tiles,   cellPopulations = c('C2', 'C5'),   threshold = 0 # Take union of all samples' open tiles ) } #> Loading required package: BSgenome.Hsapiens.UCSC.hg19 #> Loading required package: BSgenome #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Warning: package ‘S4Vectors’ was built under R version 4.1.3 #> Loading required package: stats4 #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: GenomicRanges #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Loading required package: rtracklayer #> Loading required package: TxDb.Hsapiens.UCSC.hg38.refGene #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: org.Hs.eg.db #> Error in getAnnotationDbFromInstalledPkgname(dbName = TxDb, type = \"TxDb\"): dbName must be a character string. Please provide TxDb or OrgDb as a string. # }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"plotConsensus — plotConsensus","title":"plotConsensus — plotConsensus","text":"plotConsensus Extracts peak reproducibility generates \t\t\t\t\theuristic plots can used determine reproducibility threshold \t\t\t\t\tused within getSampleTileMatrix.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotConsensus — plotConsensus","text":"","code":"plotConsensus(   tileObject,   cellPopulations = \"All\",   groupColumn = NULL,   returnPlotList = FALSE,   returnDFs = FALSE,   numCores = 1 )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotConsensus — plotConsensus","text":"tileObject MultiAssayExperiment object callOpenTiles, cellPopulations cell populations want visualize. groupColumn Optional parameter, getSampleTileMatrix, defines whether want plot reproducibility within returnPlotList Instead one plot celltypes/conditions, returns list plots cell types returnDFs Instead plot, returns data.frame reproducibility across samples. set false, plots data.frame instead returning . numCores Number cores multithread .","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotConsensus — plotConsensus","text":"SampleTileObj input data structure added gene annotations.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"plotRegion — plotRegion","title":"plotRegion — plotRegion","text":"plotRegion Plots region summarized across   cell groupings (groups=initial getPopFrags() split) optional motif   overlay, chromosome position ideogram, additional GRanges tracks.   plotting motif overlay, ensure motif annotations added   counts SummarizedExperiment. basic plot can rendered just   counts SummarizedExperiment, additional formatting arguments allow   customization. Note show specific genes option   'whichGene' RMariaDB package must installed.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotRegion — plotRegion","text":"","code":"plotRegion(   countSE,   plotType = \"area\",   base_size = 12,   counts_color = NULL,   range_label_size = 2,   legend.position = NULL,   facet_label_side = \"top\",   counts_color_var = \"Groups\",   counts_group_colors = NULL,   counts_theme_ls = NULL,   motifSetName = NULL,   motif_y_space_factor = 4,   motif_stagger_labels_y = FALSE,   motif_weights = NULL,   motif_weight_name = \"Motif Weight\",   motif_weight_colors = c(darkblue = -10, gray = 0, darkred = 10),   motif_lab_size = 1,   motif_lab_alpha = 0.25,   motif_line_alpha = 0.25,   motif_line_size = 0.75,   showGene = TRUE,   whichGene = NULL,   db_id_col = \"REFSEQ\",   collapseGenes = \"None\",   gene_theme_ls = NULL,   additionalGRangesTrack = NULL,   linkdf = NULL,   showIdeogram = TRUE,   ideogram_genome = \"hg19\",   relativeHeights = c(Chr = 0.9, `Normalized Counts` = 7, Links = 1.5, Genes = 2,     AdditionalGRanges = 4.5),   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotRegion — plotRegion","text":"countSE SummarizedExperiment MOCHA::getCoverage plotType Options include 'overlaid','area', 'RidgePlot'. default 'area', plot separate track group area filled curve. Setting plotType 'overlaid' overlay count plot histograms across samples, instead faceting separately. Setting plotType 'RidgePlot' generate ridgeplot across groups. base_size Numeric, default 12. Global plot base text size parameter counts_color Optional color palette. named vector color values names unique values `color_var` column range_label_size Numeric value, default 4. Text size y-axis range label legend.position acceptable `legend.position` argument theme(). Default NULL place legend overlaid plots (0.8,0.8), \"right\" faceted plots. facet_label_side Direction character value, default \"top\". Can also \"right\", \"left\", \"bottom\". Position facet label. counts_color_var Character value, default \"Groups\". Column name countdf use color counts plots. used counts_group_colors provided counts_group_colors Optional named color vector. Values colors, names levels `counts_color_var`. provided, color plots specifically using `scale_color_manual()` counts_theme_ls list named theme arguments passed theme(). example, `list(axis.ticks = element_blank())`. Default NULL use `.counts_plot_default_theme`. motifSetName name motif set ArchRProj use annotation. Example: 'JasparMotifs' motif_y_space_factor factor vertical spacing motif labels. Default 4. Increase make labels farther apart, decrease make labels closer. motif_stagger_labels_y = FALSE Logical value, default FALSE. TRUE,  stagger motif labels adjacent columns vertical direction motif_weights Optional numeric vector, default NULL. provided used color motif labels weighted values motif_weight_name Character value, default \"Motif Weight\". Used label legend motif colors motif_weight_colors Named numeric vector. Names color values breaks corresponding values motif_weights. Values outside highest lowest value appear max min defined color value. motif_lab_size Numeric value, default 1. Size motif labels. motif_lab_alpha Numeric value, default 0.25. Alpha motif labels. motif_line_alpha Numeric value, default 0.25. Alpha motif lines. motif_line_size Numeric value, default 1. Size motif lines. showGene Logical value, default TRUE. Whether gene track plotted. whichGene Name gene plotting specific gene region. db_id_col Character value. Column `orgdb` containing output id `whichGene` plotting. Default \"REFSEQ\". collapseGenes Options include 'collapseAll', 'longestTx', 'None' Default 'None' plot expanded view reference genes, 'collapseAll' want collapse gene tracks one, 'longestTx' plot longest transcript gene. gene_theme_ls Named list parameters passed `theme()` gene plot. Default NULL use `.gene_plot_theme` additionalGRangesTrack GRanges object containing additional track plot data linkdf dataframe co-accessible links display additional track showIdeogram Logical value, default TRUE. TRUE plots chromosome ideogram top multi-track plot ideogram_genome Character value, genome name ideogram plot. Default 'hg19'. relativeHeights Named numeric vector relative heights 4 track plots enable clean visualization many tracks. Unused tracks ignored. Default value = c(`Chr` = 0.9, `Normalized Counts` = 7, `Genes`= 2, `AdditionalGRanges` = 4.5) verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotRegion — plotRegion","text":"input ggplot object motif labels overlaid","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/plotRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotRegion — plotRegion","text":"","code":"if (FALSE) { # my_count_SE is a counts data frame generated by extractRegion()  # Simple counts + ideogram + all genes: plotRegion(countSE = my_count_SE)  # Motif overlay for a project my_proj containing \"JasparMotifs\" annotations: plotRegion(   countSE = my_count_SE, motifSetName = \"JasparMotifs\",   motif_lab_alpha = 1, motif_line_alpha = 1 )  # Motif overlay w/ weights: plotRegion(   countSE = my_count_SE, motifSetName = \"JasparMotifs\", motif_lab_alpha = 1,   motif_line_alpha = 1, motif_weights = my_enrichment_weights ) }"},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationConsensusTiles.html","id":null,"dir":"Reference","previous_headings":"","what":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","title":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","text":"singlePopulationConsensusTiles R helper function, part   single-cell peak","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationConsensusTiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singlePopulationConsensusTiles — singlePopulationConsensusTiles","text":"","code":"singlePopulationConsensusTiles(   peaksExperiment,   sampleData,   threshold,   groupColumn = NULL,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"singlePopulationSampleTileMatrix function can transform   set tile intensities peak X sample matrix custom set tiles","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"","code":"singlePopulationSampleTileMatrix(   peaksExperiment,   consensusTiles,   NAtoZero = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"peaksExperiment peakset RaggedExperiment, one celltype output callOpenTiles consensusTiles vector containing tileIDs subset sample-tile matrix","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"sampleTileIntensityMat sample X peak matrix containing observed   measurements sample peak.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"technical details algorithm found XX.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/singlePopulationSampleTileMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"singlePopulationSampleTileMatrix — singlePopulationSampleTileMatrix","text":"XX","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetObject — subsetMOCHAObject","title":"subsetObject — subsetMOCHAObject","text":"subsetObject subsets tileResults-type object (  callOpenTiles), SummarizedExperiment-type object (  getSampleTileMatrix), either cell type sample metadata.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subsetObject — subsetMOCHAObject","text":"","code":"subsetMOCHAObject(   Object,   subsetBy,   groupList,   na.rm = TRUE,   subsetPeaks = TRUE,   verbose = FALSE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetObject — subsetMOCHAObject","text":"Object MultiAssayExperiment RangedSummarizedExperiment, subsetBy variable subset . Can either 'celltype', column sample metadata (see colData(Object)) groupList list cell type names sample-associated data used subset Object na.rm removes groups NA set true. set false, filter everything groupList also NA values. subsetPeaks subsetting cell types, need decide want subset tile set tiles  called cell types. default TRUE. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/subsetMOCHAObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetObject — subsetMOCHAObject","text":"Object input Object, filtered either cell type   samples desired.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":null,"dir":"Reference","previous_headings":"","what":"testCoAccessibilityChromVar — testCoAccessibilityChromVar","title":"testCoAccessibilityChromVar — testCoAccessibilityChromVar","text":"testCoAccessibilityChromVar takes input set tile   pairs tests whether significantly different compared   background set found via ChromVAR","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"testCoAccessibilityChromVar — testCoAccessibilityChromVar","text":"","code":"testCoAccessibilityChromVar(   SampleTileMatrix,   tile1,   tile2,   numCores = 1,   ZI = TRUE,   backNumber = 1000,   highMem = FALSE,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"testCoAccessibilityChromVar — testCoAccessibilityChromVar","text":"SampleTileMatrix SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices tile1 vector indices tile names (chrX:100-2000) tile pairs test (first tile pair) tile2 vector indices tile names (chrX:100-2000) tile pairs test (second tile pair) numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. backNumber number ChromVAR-matched background pairs. Default 1000. highMem Boolean control memory usage. Default FALSE. set highMem TRUE plenty memory want run function faster.s verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityChromVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"testCoAccessibilityChromVar — testCoAccessibilityChromVar","text":"foreGround data.frame Tile1, Tile2, Correlation, p-value   correlation compared background","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":null,"dir":"Reference","previous_headings":"","what":"testCoAccessibilityRandom — testCoAccessibilityRandom","title":"testCoAccessibilityRandom — testCoAccessibilityRandom","text":"testCoAccessibilityRandom takes input set tile   pairs tests whether significantly different compared   random, non-overlapping background set.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"testCoAccessibilityRandom — testCoAccessibilityRandom","text":"","code":"testCoAccessibilityRandom(   SampleTileMatrix,   tile1,   tile2,   numCores = 1,   ZI = TRUE,   backNumber = 1000,   verbose = TRUE )"},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"testCoAccessibilityRandom — testCoAccessibilityRandom","text":"SampleTileMatrix SummarizedExperiment object output getSampleTileMatrix containing sample-tile matrices tile1 vector indices tile names (chrX:100-2000) tile pairs test (first tile pair) tile2 vector indices tile names (chrX:100-2000) tile pairs test (second tile pair) numCores Optional, number cores use multiprocessing. Default 1. ZI boolean flag enables zero-inflated (ZI) Spearman correlations used. Default TRUE. FALSE, skip zero-inflation calculate normal Spearman. backNumber number background pairs. Default 1000. verbose Set TRUE display additional messages. Default FALSE.","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/testCoAccessibilityRandom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"testCoAccessibilityRandom — testCoAccessibilityRandom","text":"foreGround data.frame Tile1, Tile2, Correlation, p-value   correlation compared background","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"youden_threshold — youden_threshold","title":"youden_threshold — youden_threshold","text":"Trained regression model predicting cutoff threshold peak calling. Call: loess(formula = OptimalCutpoint ~ Ncells, data = thresh_df)","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"youden_threshold — youden_threshold","text":"","code":"youden_threshold"},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"youden_threshold — youden_threshold","text":"list 18 regression variables","code":""},{"path":"https://aifimmunology.github.io/MOCHA/reference/youden_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"youden_threshold — youden_threshold","text":"Number Observations: 27 Equivalent Number Parameters: 5.98 Residual Standard Error: 0.02121","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://aifimmunology.github.io/MOCHA/news/index.html","id":"mocha-010","dir":"Changelog","previous_headings":"","what":"MOCHA 0.1.0","title":"MOCHA 0.1.0","text":"CRAN release: 2022-12-06 Added NEWS.md file track changes package. MOCHA submitted CRAN initial release.","code":""}]
